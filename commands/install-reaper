#!/usr/bin/env bash

install_path="$REAPER_APP_DIR/${1-reaper}"
user=$(git config github.user)

if test -z "${1-}"; then
    # default
    app_name="reaper.app"
else
    app_name="$1.app"
fi

original="REAPER.app"

# echo "ip: $install_path"
# echo "an: $app_name"

# or if  $1 == $RPP_LATEST_DIR exit
if ! test -d $install_path; then

    echo-green "Installing latest version of Reaper to $install_path"

	echo "Setting up reaper config."
	if test -n "$user"; then
		reaperConfig="git@github.com:$user/reaper-config.git"
		if ! confirm-bool "Does this repository house your Reaper configuration? [$reaperConfig]"; then
			reaperConfig=''
		fi
	fi

	echo "Cloning the Reaper configuration into $install_path"
	if ! git clone "$reaperConfig" $install_path; then
		echo "The clone of the repository [$reaperConfig] to [$install_path] failed."
		echo "Dorothy will initialise the directory as a git repository, and leave it up to you to sync it up with a remote."
		echo
		pushd $install_path > /dev/null || exit 1
		silent git init
		popd > /dev/null || exit 1
	else
        pushd $install_path > /dev/null 2>&1
        # echo "pwd: $PWD"
        git checkout $GIT_DEFAULT_BRANCH
        # git reset --hard HEAD
        git submodule update --init --recursive
        # cd Scripts/reaper-keys && git checkout molleweide && cd ../..
        # cd Effects/molleweide && git checkout molleweide && cd ../..
        # cd ColorThemes && git checkout molleweide && cd ..
        popd > /dev/null 2>&1
	fi

    brew install --cask reaper --appdir=$install_path --force
    $(mv $install_path/$original $install_path/$app_name)
fi
