#!/usr/bin/env bash

# TODO:
# ~ why choose-option --multi error
#     It seems that the fail occurs when coming from `get_select_executable`,
#     but when running `install_kmonad` alone works fine.
# ~ echo-style
#   look at how echo style is used in bash.bash
#   echo-style \
# 			--code="$0" ' ' --error='is incompatible with' ' ' --code="bash $BASH_VERSION" $'\n' \
# 			'Run ' --code='setup-util-bash' ' to upgrade capabilities, then run the prior command again.' >/dev/stderr

# ??????
# index a string in bash
# https://unix.stackexchange.com/questions/303960/index-a-string-in-bash

function kmonad_run_new() (
	source "$DOROTHY/sources/bash.bash"
	require_array 'mapfile'

	# Paths
	KMONAD_CONFIG_DIR="$XDG_CONFIG_HOME/kmonad"
	KARABINER_APP="/Applications/.Karabiner-VirtualHIDDevice-Manager.app"

	# ============================================
	# User config variables

	USER_HARDWARE_KEYBOARD_LIST=(
		"ergo"
		"pro"
		"air"
	)
	declare -A DEFSRC_FILES=(
		[ergo]="defsrc_ergodox.kbd"
		[pro]="defsrc_mbpro_swe.kbd"
		[air]="defsrc_mbair.kbd"
	)
	declare -A DEFCFG_INPUT_STRINGS=(
		[ergo]="Ergodox EZ"
		[pro]="Apple Internal Keyboard / Trackpad"
		[air]="Apple Internal Keyboard / Trackpad"
	)

	# =================================

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Utility for running a kmonad. Requires that you have an existing config.
			Currently, this utility is dependent on [ x-motemen/ghq ] buing installed.

			????

			USAGE:
			?????
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# =================================
	# Args processing

	# # TODO: how should i handle arguments.
	# #
	# # kmo -c
	# #     select hw and print
	# #
	# # kmo -c -d
	# #     select hw, print, and dry run
	# #
	# # kmo -c -- <path>
	# #     print layout at path
	# #
	# # kmo -c -r
	# #     select layout print and run
	# #
	# # kmo -c -r -- <path>
	# #   print and run layout at path
	# #
	# # Process action arguments
	# local item action='' option_branch='' option_commit='' args=()
	# while test "$#" -ne 0; do
	# 	item="$1"
	# 	shift
	# 	case "$item" in
	# 	'--help' | '-h') help ;;
	# 	'-d' | '--dry-run') action='dry_run' ;;
	# 	'-c' | '--cat') action='cat' ;;
	# 	'-w' | '--write') action='write' ;;
	# 	'-r' | '--run') action='run' ;;
	# 	# use layout @ path
	# 	# use config @ path
	# 	# use executable @ path
	# 	'--'*) help "An unrecognised flag was provided: $item" ;;
	# 	*) help "An unrecognised argument was provided: $item" ;;
	# 	esac
	# done
	#
	# if test -z "$action"; then
	# 	help "<action> must be provided."
	# fi

	# =================================
	# Helpers

	# Do I need to handle the `kext` case? No, because it wouldn't be possible to
	# get new macintosh machines with such an old OS, in those cases I would just
	# run linux on those computers.
	function macos_setup_activate_dext() {
		local GHQ_KMONAD_REPO=$1 dext_path='' dext_exists='' KARABINER_APP
		dext_exists=$(defaults read "$KARABINER_APP/Contents/Info.plist" CFBundleVersion | grep 1.15.0)

		if test -z "$dext_exists"; then
			dext_path="$GHQ_KMONAD_REPO/c_src/mac/Karabiner-DriverKit-VirtualHIDDevice/dist/Karabiner-DriverKit-VirtualHIDDevice-1.15.0.dmg"
			sudo installer -pkg "$dext_path" -target /Applications
		else
			echo-style --g3 "dext v1.15.0 already installed"
		fi
		echo-style --g3 "Activating dext to be used with kmonad"
		"$KARABINER_APP/Contents/MacOS/Karabiner-VirtualHIDDevice-Manager" activate
	}

	function get_kmo_path() {
		ghq list -p "kmonad/kmonad"
	}

	# NOTE: kmonad build docs [ https://github.com/kmonad/kmonad/blob/master/doc/installation.md#compilation ]
	#
	# TODO: look at setup-util-gocryptfs
	#
	function build_kmonad() {
		# make sure kmonad repo exists in GHQ
		local GHQ_KMONAD_REPO=''

		# TODO: move this up into the get_kmo_path function.
		# >>> convert this into a more generalized function for getting the
		# path of a dir, and if it doesn't exist, then clone it.
		GHQ_KMONAD_REPO=$(get_kmo_path)
		if test -z "$GHQ_KMONAD_REPO"; then
			ghq get -p git@github.com:kmonad/kmonad.git
			GHQ_KMONAD_REPO=$(ghq list -p "github.com/kmonad/kmonad")
		fi

		echo ">> $GHQ_KMONAD_REPO"

		if ! command-exists stack; then
			if confirm --bool --ppid=$$ -- \
				"Building kmonad requires Haskell ecosystem? Proceed?"; then
				setup-haskell
			else
				return 1 # ?/
			fi
		fi

		arch="$(get-arch)"
		# github_user=$(git config github.user)

		pushd $GHQ_KMONAD_REPO >/dev/null 2>&1
		# TODO: stack clean -> completely reset build

		if is-mac; then
			if confirm --bool --ppid=$$ -- \
				"MACOS: Are you sure that you want to proceed with building [ KMONAD ]"; then
				local kmo_karab_include_dir="c_src/mac/Karabiner-DriverKit-VirtualHIDDevice/include/pqrs/karabiner/driverkit:c_src/mac/Karabiner-DriverKit-VirtualHIDDevice/src/Client/vendor/include"
				# note: older macs using [ kext ]
				# stack build --flag kmonad:kext --extra-include-dirs=c_src/mac/Karabiner-VirtualHIDDevice/dist/include
				# If arm / intel
				if test "$arch" = 'a64'; then
					stack build --flag kmonad:dext --arch=aarch64 --extra-include-dirs="$kmo_karab_include_dir"
				else
					stack build --flag kmonad:dext --extra-include-dirs="$kmo_karab_include_dir"
				fi
				macos_setup_activate_dext "$GHQ_KMONAD_REPO"
			fi

		elif is-linux; then
			echo "BUILD KMONAD LINUX @ $PWD"
			# stack build
		fi

		# MOVE BIN TO $XDG_BIN_HOME
		if confirm --bool --ppid=$$ -- \
			"Copy kmonad build to XDG_BIN_HOME ()"; then
			local version='' count_existing=0

			stack_bin_executable="$(stack path --local-install-root)/bin/kmonad"

			local status capture
			eval_capture --statusvar=status --stdoutvar=capture -- find "$XDG_BIN_HOME" -type f -name "kmonad"
			if test -n "$capture"; then
				count_existing=$(echo-lines -- "${capture[@]}" | grep -c "kmonad")
			fi

			echo "count_existing: $count_existing"

			commit=$(git rev-parse --short HEAD)
			branch=$(git rev-parse --abbrev-ref HEAD)
			version=$($stack_bin_executable --version | cut -d ',' -f1) # version outputs <version, commit xyz...>
			new_name="kmonad-$count_existing-$version.$commit.$branch"
			echo "Copying bin to [$XDG_BIN_HOME/dorothy/$new_name]"
			cp -i "$(stack path --local-install-root)/bin/kmonad" "$XDG_BIN_HOME/$new_name"
		fi

		popd >/dev/null 2>&1
	}

	# NOTE: INSTALL DOCS:
	# [ https://github.com/kmonad/kmonad/blob/master/doc/installation.md#binaries ]

	# https://aur.archlinux.org/packages/kmonad-bin
	# https://github.com/kmonad/kmonad/blob/master/doc/installation.md#void-linux
	# https://github.com/kmonad/kmonad/blob/master/doc/installation.md#gnu-guix
	function install_kmonad_from_packages() {
		setup-util --name='kmonad' --cli='kmonad' --order='aur xbps guix' \
			AUR='kmonad-bin' \
			XBPS='kmonad' \
			GUIX='kmonad'
	}

	# NOTE:
	# QUESTIONS: am I "aborting" correctly here?
	function install_kmonad() {
		local status kmo_packages

		eval_capture --statusvar=status --stdoutvar=kmo_packages -- which -a kmonad

		if is-mac; then
			if test "$status" -ne 0; then
				if confirm --bool --ppid=$$ -- \
					"MACOS: No executable found! Do you want to build from source?"; then
					build_kmonad
				fi
			else
				echo "MACOS: [install_kmonad] executable exists."
				return 0
			fi
		fi

		# if test "x" = "x"; then
		if is-linux; then
			if test "$status" -ne 0; then

				local fodder choices
				fodder="$(
					choose-option --multi \
						--question="LINUX: No kmonad command was found - Select install method. Use space key to select." \
						--label -- \
						package "Try install via package managers" \
						build "Create local build"
				)"

				if test -z "$fodder"; then
					print_line 'No choices selected.'
					return 22 # ??
				fi

				mapfile -t choices <<<"$fodder" # <( destroys stdin
				print_line "Proceeding with these choices: [ ${choices[*]} ]"

				if is-needle package "${choices[@]}"; then
					install_kmonad_from_packages
				fi

				if is-needle build "${choices[@]}"; then
					build_kmonad
				fi

			else
				if [ ! "$(echo "${kmo_packages[@]}" | grep "$XDG_BIN_HOME/kmonad.*")" ]; then
					if confirm --bool --ppid=$$ -- \
						"LINUX: Found kmonad PACKAGE - Do you ALSO want to build kmonad from source"; then
						build_kmonad
					fi
				else
					if confirm --bool --ppid=$$ -- \
						"LINUX: Found kmonad LOCAL BUILD - Do you ALSO want to install package?"; then
						install_kmonad_from_packages
					fi
				fi
			fi
		fi
	}

	# NOTE:
	# QUESTIONS: am I "aborting" correctly here?
	function get_select_executable() {
		local status kmo_packages

		eval_capture --statusvar=status --stdoutvar=kmo_packages -- which -a kmonad

		# ok
		if test "$status" -eq 0; then

			selected_executable="$(choose-option --confirm --question='Select executable name.' -- "${kmo_packages[@]}")"
			echo "$selected_executable"

		else
			if confirm --bool --ppid=$$ -- "No executable found! Do you want to proceed with installing kmonad?"; then
				local status_install
				eval_capture --statusvar=status -- install_kmonad

				if test "$status" -ne 0; then
					echo-error '[install_kmonad] failed inside [get_select_executable].'
					return 22 # ??
				fi

				# find executables again
				eval_capture --statusvar=status --stdoutvar=kmo_packages -- which -a kmonad
				selected_executable="$(choose-option --confirm --question='Select executable name.' -- "${kmo_packages[@]}")"
				echo "$selected_executable"

			else
				echo-error "[User chose NOT to install. Aborting.]"
				return 1 # ECANCELED 125 Operation cancelled
			fi
		fi
	}

	function get_select_hardware() {
		SELECTED_HARDWARE="$(choose-option --confirm --question='Select hardware to run kmonad for.' -- "${USER_HARDWARE_KEYBOARD_LIST[@]}")"
		echo "$SELECTED_HARDWARE"
	}

	function compile_base() {
		local SELECTED_HARDWARE=$1 defsrc_base_file defcfg_chunk

		defsrc_base_file="$KMONAD_CONFIG_DIR/defsrc/${DEFSRC_FILES[$SELECTED_HARDWARE]}"

		# Create kmonad `cfg` block
		# <output> needs to be dynamic for mac/linux
		input="${DEFCFG_INPUT_STRINGS[$SELECTED_HARDWARE]}"
		output="kext"
		fallthrough=false

		defcfg_chunk="(defcfg
      input (iokit-name \"$input\")
      output ($output)
      fallthrough $fallthrough
    )"

		echo "$defcfg_chunk"
		cat "$defsrc_base_file"
	}

	function compile_layers() {
		for f in "$KMONAD_CONFIG_DIR/common/"*.kbd; do
			local filename
			filename="$(basename "$f")"
			if [[ $filename =~ "~.kbd" ]]; then
				continue
			fi
			cat "$f"
		done
	}

	function compile_full_layout() {
		compile_base "$SELECTED_HARDWARE"
		compile_layers
	}

	function get_compiled_layout_file() {
		local SELECTED_HARDWARE=$1

		local layout_temp_file="/tmp/kmonad_compiled_layout" # "$(mktemp /tmp/kmonad-XXX)"
		compile_full_layout "$SELECTED_HARDWARE" >"$layout_temp_file"

		echo "$layout_temp_file"
	}

	function get_necessary_parts() {
		local status hardware layout_file kmo_executable

		hardware=$(get_select_hardware)

		layout_file=$(get_compiled_layout_file "$hardware")

		eval_capture --statusvar=status --stdoutvar=kmo_executable -- get_select_executable

		if ! test "$status" -eq 0; then
			return 1
		fi

		print_line "$kmo_executable"
		print_line "$layout_file"
	}

	# =================================
	# Main functions

	function print_base() {
		local title="Print kmo base file."
		SELECTED_HARDWARE=$(get_select_hardware)
		echo-segment --h2="$title"
		compile_base "$SELECTED_HARDWARE"
		echo-segment --g2="$title"
	}

	# TODO: it would be nice to wrap each layer in a nice echo divider
	function print_layers() {
		local title="Print kmo layers."
		echo-segment --h2="$title"
		compile_layers
		echo-segment --g2="$title"
	}

	function print_layout() {
		SELECTED_HARDWARE=$(get_select_hardware)
		local title="PRINTED KMONAD LAYOUT"
		echo-segment --h2="$title"
		SELECTED_LAYOUT_FILE=$(get_compiled_layout_file "$SELECTED_HARDWARE")
		cat "$SELECTED_LAYOUT_FILE"
		echo-segment --g2="$title"
	}

	function dry_run() {
		local status fodder cmd=()
		echo-style --bold="Dry running kmonad now..."
		eval_capture --statusvar=status --stdoutvar=fodder -- get_necessary_parts

		if test "$status" -ne 0; then
			echo-error "Failed to put together command for dry/run"
			return 22 # ??
		else
			mapfile -t cmd <<<"$fodder"
			eval-helper --wrap --no-quiet -- "${cmd[@]}" -d
		fi
	}

	function run() {
		local status
		echo-style --bold="Running kmonad now..."
		eval_capture --statusvar=status --stdoutvar=parts -- get_necessary_parts

		if ! test $status -eq 0; then
			echo-error "Failed to put together command for dry/run"
		else
			echo "Run command is commented out in [run]"
			# sudo "${parts[@]}" --allow-cmd
		fi
	}

	function write_layout_to_file() {
		echo "write layout -> todo..."
	}

	# kept just to supress some lsp messages
	function dummy() {
		macos_setup_activate_dext "arst"
		build_kmonad
		install_kmonad_from_packages
		get_necessary_parts
		get_select_executable
	}

	# =================================
	# Act

	local action="${1-}"

	if [ $# -eq 0 ]; then
		# help "<action> must be provided."
		dry_run

	elif test "$action" = "help"; then
		help "<action> must be provided."

	elif test "$action" = "install"; then
		install_kmonad
	elif test "$action" = "build"; then
		build_kmonad

	elif test "$action" = 'dry'; then
		dry_run
	elif test "$action" = "run"; then
		run

	elif test "$action" = 'base'; then
		print_base

	elif test "$action" = 'layers'; then
		print_layers

	elif test "$action" = 'layout'; then
		print_layout

	elif test "$action" = 'write'; then
		write_layout_to_file

	elif test "$action" = 'dummy_plummy_xxxyy'; then
		dummy

	fi
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	kmonad_run_new "$@"
fi
