#!/usr/bin/env bash

action="${1-}"
arg1="${2-}"

call_yabai() {
    yabai_cmd="sudo -u hjalmarjakobsson bash -cl 'yabai $1'"
    echo "$yabai_cmd"
    # ($yabai_cmd)
}

call_dwm() {
    echo "call dwm"
}

reload() {
    if is-mac; then
        brew services restart yabai
        # brew services restart skhd
        # limelight # there is a wierd err msg but it works...
    else
	    echo 'reload linux wm...'
    fi
}

# # focus window
# yabai -m window --focus west
# yabai -m window --focus south
# yabai -m window --focus north
# yabai -m window --focus east

# # swap window
# yabai -m window --swap west
# yabai -m window --swap south
# yabai -m window --swap north
# yabai -m window --swap east

# # move window
# yabai -m window --warp west
# yabai -m window --warp south
# yabai -m window --warp north
# yabai -m window --warp east

# yabai -m space --focus recent
# yabai -m space --focus prev
# yabai -m space --focus next

# # move window
# yabai -m window --move rel:-20:0
# yabai -m window --move rel:0:20
# yabai -m window --move rel:0:-20
# yabai -m window --move rel:20:0

# # set insertion point in focused container
# yabai -m window --insert west
# yabai -m window --insert south
# yabai -m window --insert north
# yabai -m window --insert east

move() {
    echo "move window"
}

# yabai         bsp | stack | float
# dwm
layout() {
    if is-mac; then
        if ! test -z "${arg1-}"; then
            call_yabai "-m space --layout $arg1"
        fi
    else
        echo "linux cmd todo..."
    fi
}

## Create space (requires SIP disabled)
# yabai -m space --create

# # Create space, moved focused app, and focus space (requires SIP disabled) - uses jq for parsing json (brew install jq)
# ctrl + shift - w : yabai -m space --create && \
#   index="$(yabai -m query --spaces --display | jq 'map(select(."native-fullscreen" == 0))[-1].index')" && \
#   yabai -m window --space "${index}" && \
#   yabai -m space --focus "${index}"

# yabai -m window --space recent && yabai -m space --focus recent
# yabai -m window --space next && yabai -m space --focus next
# yabai -m window --space prev && yabai -m space --focus prev
# yabai -m window --space  1 && yabai -m space --focus 1
# yabai -m window --space  2 && yabai -m space --focus 2
# yabai -m window --space  3 && yabai -m space --focus 3
# yabai -m window --space  4 && yabai -m space --focus 4
# yabai -m window --space  5 && yabai -m space --focus 5
# yabai -m window --space  6 && yabai -m space --focus 6
# yabai -m window --space  7 && yabai -m space --focus 7
# yabai -m window --space  8 && yabai -m space --focus 8
# yabai -m window --space  9 && yabai -m space --focus 9
# yabai -m window --space 10 && yabai -m space --focus 10

space() {
    echo ":: spaces ::"
    if is-mac; then
        echo "mac spaces"
        # CREATE
        # FOCUS | -m window --space 10 && yabai -m space --focus 10
    else
        echo "linux todo..."
    fi
}

# # increase window size
# yabai -m window --resize left:-20:0
# yabai -m window --resize bottom:0:20
# yabai -m window --resize top:0:-20
# yabai -m window --resize right:20:0

# # decrease window size
# yabai -m window --resize left:20:0
# yabai -m window --resize bottom:0:-20
# yabai -m window --resize top:0:20
# yabai -m window --resize right:-20:0

# yabai -m window --resize top:0:-40; yabai -m window --resize bottom:0:-40
# yabai -m window --resize right:40:0; yabai -m window --resize left:40:0
# yabai -m window --resize bottom:0:40; yabai -m window --resize top:0:40
# yabai -m window --resize left:-40:0; yabai -m window --resize right:-40:0

resize() {
    echo ":: resize ::"
}

balance() {
    echo "balance windows"
    # yabai -m space --balance
}

# yabai             x | y
mirror() {
    if is-mac; then
        if ! test -z "${arg1-}"; then
            call_yabai "-m space --mirror $arg1-axis"
        fi
    else
        echo "linux todo..."
    fi
}

# yabai         90 | 180 | 270
rotate() {
    if is-mac; then
        if ! test -z "${arg1-}"; then
            call_yabai "-m space --rotate $arg1"
        fi
    else
        echo "linux todo..."
    fi

}

toggle_gap() {
    echo "toggle gap"
    # # toggle desktop offset
    # yabai -m space --toggle padding; yabai -m space --toggle gap
}

toggle_border() {
    echo "toggle border"
    # # toggle window border
    # shift + alt - b : yabai -m window --toggle border
}

# yabai -m window --toggle zoom-parent

toggle_fullscreen() {
    echo "toggle fullscreen"
    # yabai -m window --toggle zoom-fullscreen
}

toggle_fullscreen_native() {
    echo "toggle native fullscreen"
    # yabai -m window --toggle native-fullscreen
}

# # toggle window split type
# fn - e : yabai -m window --toggle split

toggle_float_center() {
    echo "toggle float center"
    # # float / unfloat window and center on screen
    # fn - t : yabai -m window --toggle float;\
    #           yabai -m window --grid 4:4:1:1:2:2
}

toggle_sticky() {
    echo "toggle sticky"
    # # toggle sticky
    # fn - s : yabai -m window --toggle sticky


    # ???
    # # toggle sticky, float and resize to picture-in-picture size
    # fn - p : yabai -m window --toggle sticky;\
    #           yabai -m window --grid 5:5:4:0:1:1
}

#############################################################################

case "$action" in
    "reload") reload
        ;;
    "layout") layout
        ;;
    "ratio") ratio
        ;;
    *) exit 1 # no options -> return err
        ;;
esac

