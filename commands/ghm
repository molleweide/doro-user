#!/usr/bin/env bash

# =====================================
# Arguments

# help
function help() {
	cat <<-EOF >/dev/stderr
		ABOUT:
		Copy everything from one location to another, features:
		- preserves attributes
		- progress updates
		- local and remote sources

		USAGE:
		cpr [...flags] -- <source> <destination>
		cpr [...flags] [--source=<source>] [--destination=<destination>]

		<source> and <destination> can be a local path on your current machine, or a remote path.

		If a remote path, it should be in the format of:
		    [username@hostname:/path] for files
		    [username@hostname:/path/] for directories
		The [hostname] is the hostname or IP address of a valid SSH server.
		If you the remote machine is macOS, you can enable this in System Preferences > Sharing > Remote Login.

		FLAGS:
		[--action=copy|verify] if specified, skips action prompt.
		[--tool=...] if specified, skips tool prompt. Available tools on this machine are:
		    for copy: $(echo-join ', ' -- "${copy_tools[@]}")
		    for verify: $(echo-join ', ' -- "${verify_tools[@]}")
		[--dry] if enabled, only output the determined command, do not run it.
		[--sudo] if enabled, runt he determined command as the sudo user.

		RSYNC FLAGS:
		[--owner=<user>:<group>] if specified, uses this value for the ownership of copied files.
		[--remove] if enabled, remove source files as they are successfully copied to the target.
		[--checksum] if enabled, files are compared by their checksums, instead of the default quicker date and size comparison.
		[--[no-]linux] if enabled, increases compatibility with linux systems.
		[--slashes=adjust|ignore|exit] if specified, skips guidance prompt regarding trailing slashes in paths.
		[--spaces=adjust|ignore|exit] if specified, skips guidance prompt regarding spaces in paths.
	EOF
	if test "$#" -ne 0; then
		echo-style $'\n' --error="ERROR:" $'\n' --red="$(echo-lines -- "$@")" >/dev/stderr
	fi
	return 22 # Invalid argument
}

# # process
# action=''
# tool=''
# option_source=''
# option_destination=''
# option_dry='no'
# option_sudo='no'
# option_checksum='' # ask, as otherwise contrived testing can fail
# option_remove=''   # ask
# option_linux=''    # ask
# option_owner=''    # manual
# option_slashes=''  # ask
# option_spaces=''   # ask
# while test "$#" -ne 0; do
# 	item="$1"
# 	shift
# 	case "$item" in
# 	'help' | '--help' | '-h') help ;;
# 	'--action='*) action="${item:9}" ;;
# 	'--tool='*) tool="${item:7}" ;;
# 	'--source='*) option_source="${item:9}" ;;
# 	'--destination='*) option_destination="${item:14}" ;;
# 	'--owner='*) option_owner="${item:8}" ;;
# 	'--no-dry'* | '--dry'*)
# 		option_dry="$(get-flag-value dry --missing="$option_dry" -- "$item" | echo-affirmative)"
# 		;;
# 	'--no-sudo'* | '--sudo'*)
# 		option_sudo="$(get-flag-value sudo --missing="$option_sudo" -- "$item" | echo-affirmative)"
# 		;;
# 	'--no-checksum'* | '--checksum'*)
# 		option_checksum="$(get-flag-value checksum --missing="$option_checksum" -- "$item" | echo-affirmative)"
# 		;;
# 	'--no-remove'* | '--remove'*)
# 		option_remove="$(get-flag-value remove --missing="$option_remove" -- "$item" | echo-affirmative)"
# 		;;
# 	'--no-linux'* | '--linux'*)
# 		option_linux="$(get-flag-value linux --missing="$option_linux" -- "$item" | echo-affirmative)"
# 		;;
# 	'--slashes='*) option_slashes="${item:10}" ;;
# 	'--spaces='*) option_spaces="${item:9}" ;;
# 	'--') ;;
# 	'--'*) help "An unrecognised flag was provided: $item" ;;
# 	*)
# 		if test -z "$item"; then
# 			help "Empty path argument provided."
# 		elif test -z "$option_source"; then
# 			option_source="$item"
# 		elif test -z "$option_destination"; then
# 			option_destination="$item"
# 		else
# 			help "An unrecognised argument was provided: $item"
# 		fi
# 		;;
# 	esac
# done

# # ensure valid
# action="$(
# 	choose-option --required \
# 		--question='What action to perform?' \
# 		--filter="$action" -- "${actions[@]}"
# )"
# tools=()
# if test "$action" = 'copy'; then
# 	tools=("${copy_tools[@]}")
# else
# 	tools=("${verify_tools[@]}")
# fi
# tool="$(
# 	choose-option --required \
# 		--question='Which tool to use?' \
# 		--filter="$tool" -- "${tools[@]}"
# )"
# if test -z "$option_source"; then
# 	option_source="$(
# 		ask --required \
# 			--question="Enter the source path."
# 	)"
# fi
# if test -z "$option_destination"; then
# 	option_destination="$(
# 		ask --required \
# 			--question="Enter the destination path."
# 	)"
# fi



# ---------------------------
# ---       gh help       ---
# ---------------------------

# -- flag private.

# USAGE
# gh repo create [<name>] [flags]

# FLAGS
# -c, --clone                 Clone the new repository to the current directory
# -d, --description string    Description of the repository
# --disable-issues        Disable issues in the new repository
# --disable-wiki          Disable wiki in the new repository
# -g, --gitignore string      Specify a gitignore template for the repository
# -h, --homepage URL          Repository home page URL
# --internal              Make the new repository internal
# -l, --license string        Specify an Open Source License for the repository
# --private               Make the new repository private
# --public                Make the new repository public
# --push                  Push local commits to the new repository
# -r, --remote string         Specify remote name for the new repository
# -s, --source string         Specify path to local repository to use as source
# -t, --team name             The name of the organization team to be granted access
# -p, --template repository   Make the new repository based on a template repository

# INHERITED FLAGS
# --help   Show help for command

# EXAMPLES
# # create a repository interactively
# gh repo create

# # create a new remote repository and clone it locally
# gh repo create my-project --public --clone

# # create a remote repository from the current directory
# gh repo create my-project --private --source=. --remote=upstream

# 1. TODO: nvim plugins with boilit


repo_name=$1
github_user=$(git config github.user)
ghq_gh_user_path="/Users/hjalmarjakobsson/code/repos/github.com/$github_user/"

ghq create "$github_user/$1" || exit 1

# build
pushd $ghq_gh_user_path/$1 >/dev/null 2>&1
echo "# $1" > README.md
git add --all && git commit -m 'first'
gh repo create --source=. --private --push
popd >/dev/null 2>&1

loaddb

# # help
# function help() {
# 	cat <<-EOF >/dev/stderr
# 		USAGE:
# 		sharebox [--configure] <action> -- [...args]

# 		FLAGS:
# 		--configure            Configuration guide.

# 		ACTIONS:
# 		chown -- <path>        Have the sharebox user take ownership of the specified path.
# 		info                   Dumps various information about the sharebox.
# 		mount                  Mounts the sharebox drive and vault.
# 		pause                  Pause the sharebox services.
# 		reboot                 Stop the sharebox and reboots the machine safely.
# 		run -- <command...>    Runs a command as the sharebox user.
# 		setup                  Setup the sharebox dependencies, user, and services.
# 		shutdown               Stop the sharebox and powers off the machine safely.
# 		size                   Gets the size of the sharebox drive.
# 		start                  Mounts the sharebox and starts its services.
# 		stop                   Stops the sharebox serviecs and unmounts its vault and drive.
# 		unmount                Unmounts the sharebox drive and vault.
# 		upgrade                Upgrade the services of the sharebox.
# 	EOF
# 	if test "$#" -ne 0; then
# 		echo-style $'\n' --error="ERROR:" $'\n' --red="$(echo-lines -- "$@")" >/dev/stderr
# 	fi
# 	return 22 # Invalid argument
# }

# # process
# action=''
# reconfigure='no'
# action_args=()
# while test "$#" -ne 0; do
# 	item="$1"
# 	shift
# 	case "$item" in
# 	'--help' | '-h') help ;;
# 	'--action='*) action="${item:9}" ;;
# 	'--no-configure'* | '--configure'*)
# 		reconfigure="$(get-flag-value configure --missing="$reconfigure" -- "$item" | echo-affirmative)"
# 		;;
# 	'--')
# 		action_args+=("$@")
# 		shift $#
# 		break
# 		;;
# 	'--'*) help "An unrecognised flag was provided: $item" ;;
# 	*)
# 		if test -z "$action"; then
# 			action="$item"
# 		else
# 			help "An unrecognised argument was provided: $item"
# 		fi
# 		;;
# 	esac
# done
