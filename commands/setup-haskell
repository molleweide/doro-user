#!/usr/bin/env bash

# stack upgrade
# # stack install yesod-bin --install-ghc

# TODO: show some information about XDG.
# you can host your config in $HOME or $HOME/.config

# todo: show note that user needs to source:
# [/home/molleweide/.ghcup/env] into their shell

# NOTE:
# ~ GHCup is the main installer for the general purpose language
# ~ Stack and Cabal are also very commonly used tools to manage project
#   dependencies and for building projects. A project is usually configured
#   with a .cabal file and built with Stack (or cabal)

# NOTE: Stack
#
#

# NOTE: GHCup XDG support
#
# https://www.haskell.org/ghcup/guide/
#
# To enable XDG style directories, set the environment variable GHCUP_USE_XDG_DIRS to anything.
#
# Then you can control the locations via XDG environment variables as such:
#
# XDG_DATA_HOME: GHCs will be unpacked in ghcup/ghc subdir (default: ~/.local/share)
# XDG_CACHE_HOME: logs and download files will be stored in ghcup subdir (default: ~/.cache)
# XDG_BIN_HOME: binaries end up here (default: ~/.local/bin)
# XDG_CONFIG_HOME: the config file is stored in ghcup subdir as config.yaml (default: ~/.config)
# Note that ghcup makes some assumptions about structure of files in
# XDG_BIN_HOME. So if you have other tools installing e.g. stack/cabal/ghc into
# it, this will likely clash. In that case consider disabling XDG support.

# NOTE: Cabal
#
#

function setup_haskell() (
	source "$DOROTHY/sources/bash.bash"
	require_array 'mapfile'

	# =====================================
	# Configuration

	source "$DOROTHY/sources/config.bash"

	# setup.bash provides:
	local HASKELL_INSTALL=()
	# local GO_LINTING_INSTALL='' # '', 'yes', 'no'
	load_dorothy_config 'setup.bash'

	# adjustments
	mapfile -t HASKELL_INSTALL < <(prepare_packages 'HASKELL_INSTALL' -- "${HASKELL_INSTALL[@]}")

	# # =====================================
	# # Arguments
	#
	# function help {
	# 	cat <<-EOF >/dev/stderr
	# 		USAGE:
	# 		setup-go [--flags]
	#
	# 		FLAGS:
	# 		--configure
	# 		    Configuration guide.
	#
	# 		--optional
	# 		    Only setup if it is needed by packages.
	#
	# 		--linting
	# 		    Install linting tools.
	# 	EOF
	# 	if test "$#" -ne 0; then
	# 		echo-error "$@"
	# 	fi
	# 	return 22 # EINVAL 22 Invalid argument
	# }

	# # process
	# local item configure='no' optional=''
	# while test "$#" -ne 0; do
	# 	item="$1"
	# 	shift
	# 	case "$item" in
	# 	'--help' | '-h') help ;;
	# 	'--no-optional'* | '--optional'*)
	# 		optional="$(get-flag-value optional --missing="$optional" -- "$item" | echo-affirmative || :)"
	# 		;;
	# 	'--no-linting'* | '--linting'*)
	# 		GO_LINTING_INSTALL="$(get-flag-value linting --missing="$GO_LINTING_INSTALL" -- "$item" | echo-affirmative || :)"
	# 		;;
	# 	'--no-configure'* | '--configure'*)
	# 		configure="$(get-flag-value configure --missing="$configure" -- "$item" | echo-affirmative)"
	# 		;;
	# 	'--'*) help "An unrecognised flag was provided: $item" ;;
	# 	*) help "An unrecognised argument was provided: $item" ;;
	# 	esac
	# done
	#
	# # check
	# if test "$optional" = 'yes' -a "${#HASKELL_INSTALL[@]}" -eq 0 && ! confirm --negative --ppid=$$ -- 'Setup Go?'; then
	# 	return 0
	# fi

	# =====================================
	# Start

	echo-segment --h1='Setup Haskell'

	# =====================================
	# Install

	# TODO: cabal-install??

	if confirm --bool --ppid=$$ -- \
		"Setup-haskell: Do you want to install [GHCup]"; then
		setup-util-ghcup
	fi

	if confirm --bool --ppid=$$ -- \
		"Setup-haskell: Do you want to install [Stack]"; then
		setup-util-stack
	fi

	if confirm --bool --ppid=$$ -- \
		"Setup-haskell: Do you want to install [GHC] with GHCup"; then
		ghcup install ghc
	fi

	if confirm --bool --ppid=$$ -- \
		"Setup-haskell: Do you want to install [cabal]"; then
		setup util cabal
	fi

	# ???
	# source "$DOROTHY/sources/environment.sh"

	# =====================================
	# Adjustments

	# HASKELL_INSTALL+=(
	# 	# cabal
	# )

	# =====================================
	# Packages

	# TODO: how to configure setup-util here??
	# setup-util --installer="GO" -- "${HASKELL_INSTALL[@]}"

	# =====================================
	# Extras

	# # If gometalinter exists, complete its installation.
	# if command-exists gometalinter; then
	# 	echo-segment --h2="[gometalinter] dependencies"
	# 	eval-helper --quiet -- gometalinter --install || :
	# 	echo-segment --g2="[gometalinter] dependencies"
	# fi

	# =====================================
	# Configure

	# if test "$configure" = 'yes'; then
	# 	update_dorothy_user_config 'setup.bash' -- \
	# 		--field='GO_LINTING_INSTALL' --value="$GO_LINTING_INSTALL"
	# fi

	# =====================================
	# Finish

	echo-segment --g1='Setup Haskell'
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	setup_haskell "$@"
fi
