#!/usr/bin/env bash

# @param command
# @param [ add_arg1 | add_arg2 | ... | add_argN ] OR [ rm_rule ]
test -z "${1-}" && exit 1
cmd=$1
if is-mac; then
    ypre="yabai -m rule"
    yabai_cmd=""
    rule_args=()
    if test "$cmd" = "add" -o "$cmd" = "a"; then
        yabai_cmd="add"
        for i in ${fn_args:3}; do # NOTE: why wrapping fn_args in string doesn't work?
            local rule_name=${i%=*}
            local rule_parm=${i#*=}
	        case "$rule_name" in
	            "label") rule_args+=("label=\"$rule_parm\"");; # Label used to identify the rule with a unique name
	            "app") rule_args+=("app=\"$rule_parm\"") ;; # app[!]=<REGEX>
	            "title") ;; # title[!]=<REGEX>
	            "display") ;; # display=[^]<DISPLAY_SEL>
	            "space") ;; # space=[^]<SPACE_SEL>
	            "manage") ;; # manage=<BOOL_SEL>
	            "sticky") ;; # sticky=<BOOL_SEL>
	            "mouse_follows_focus") ;; # mouse_follows_focus=<BOOL_SEL>
	            "layer") ;; # layer=<LAYER>
	            "opacity") ;; # opacity=<FLOAT_SEL>
	            "border") ;; # border=<BOOL_SEL>
	            "native-fullscreen") ;; # native-fullscreen=<BOOL_SEL>
	            "grid") ;; # grid=<rows>:<cols>:<start-x>:<start-y>:<width>:<height>
	            *) echo "NO_MATCH";;
	        esac
        done
	    echo "$ypre --$yabai_cmd ${rule_args[@]}"
	elif test "$cmd" = 'remove' -o "$cmd" = 'rm'; then
        echo "rule remove" # TODO: rule selection | yabai -m rule --remove <RULE_SEL>       Remove an existing rule with the given index or label.
	elif test "$cmd" = 'list' -o "$cmd" = 'ls'; then
        echo "rule list" # yabai -m rule --list                    Output list of registered rules.
	fi
else
    echo "linux todo..."
fi
