#!/usr/bin/env bash

# M1 support -> https://github.com/koekeishiya/yabai/issues/725
# https://github.com/koekeishiya/yabai/wiki/Installing-yabai-(latest-release)
# https://github.com/koekeishiya/yabai/wiki/Disabling-System-Integrity-Protection

# ::: NOTE: SIP DISABLE REQUIREMENTS :::
# SILICON | macOS 12.x.x           ->   `csrutil disable --with kext --with dtrace --with basesystem`               # Filesystem Protections, Debugging Restrictions and NVRAM Protection. (** printed warning can be safely ignored)
# INTEL   | macOS 12.x.x / 11.x.x  ->   `csrutil disable --with kext --with dtrace --with nvram --with basesystem`  # Filesystem Protections and Debugging Restrictions (workaround because --without debug does not work). (**)
# INTEL   | macOS 10.14 / 10.15    ->   `csrutil enable --without debug --without fs`                               # Filesystem Protections and Debugging Restrictions. (**)
# INTEL   | macOS 10.13            ->   `csrutil disable`                                                           # (disables SIP completely)

# ::: NOTE: LOAD _SCRIPTING_ADDITION_ :::
# THIS IS NECESSARY FOR FULL FEATURES
# sudo yabai --install-sa && yabai --load-sa
# BIG SUR REQUIRES MANUAL LOADING OF `SA`
# # replace <user> with your username (output of: whoami).
# sudo visudo -f /private/etc/sudoers.d/yabai <<< `<user> ALL = (root) NOPASSWD: /usr/local/bin/yabai --load-sa`
# ::: NOTE: UPDATING YABAI :::
# brew services stop yabai
# brew upgrade yabai
# sudo yabai --uninstall-sa
# sudo yabai --install-sa
# brew services start yabai








# ---------------------------------- #
#             JQ HELPERS             #
# ---------------------------------- #

jq_w_filter_keys(){ wmq w | jq "map(.\"$1\")"; }

jq_w_sel_by_app(){
    # input_str="$1"
    echo "jq_w_sel_by_app -> ${*@Q}"
    wmq w | jq "map(select(.\"app\" == \"$input_str\"))";
}

jq_w_titles_by_app(){ wmq w | jq "map(select(.\"app\" == \"$1\").title)" | tr -d '[],"'; }

jq_win_ids_by_key(){ wmq w | jq "map(select(.\"$1\" == \"$2\").id)" | tr -d '[],"'; }

jq_w_ids_by_app_name(){  wmq w | jq "map(select(.\"app\" == \"$1\").id)" | tr -d '[],"'; }

jq_w_ids_by_title(){  wmq w | jq "map(select(.\"title\" == \"$1\").id)" | tr -d '[],"'; }

# ---------

get_key() {
    # echo "!"
    jq_w_filter_keys $1
}

# aidtr=($(echo $aid | tr -d '[],"'))

# jq_w_sel_by_key(){ wmq w | jq "map(select(.\"app\" == \"$1\")).$2"; }

# wmw t float && /tmp/yabai-restore/$(wmq w w | jq -re '.id').restore 2>/dev/null || true

# index="$(yabai -m query --spaces --display | jq 'map(select(."is-native-fullscreen" == false))[-1].index')" && \

# toggle active window
# wmq s s | jq -r 'if .type == "bsp" then "float" else "bsp" end')

# ::: WINDOW FUNCTIONS :::::::::::::::::::::::::::::::::

# ---------------------------------- #
#           CONFIG PARAMS            #
# ---------------------------------- #

# "auto_balance" | "ab")  yc="auto_balance";;               # [<BOOL_SEL>]
# "debug_output" | "do")  yc="debug_output";;               # [<BOOL_SEL>]grid_big_left_double_right
# "external_bar" | "bar") yc="external_bar";;               # [<main|all|off>:<top_padding>:<bottom_padding>]
# "ffms")                 yc="focus_follows_mouse";;        # [autofocus|autoraise|off]
# "fmsf")                 yc="mouse_follows_focus";;        # [<BOOL_SEL>]
# "gap" | "gp")           yc="window_gap";;       # [<integer number>]
# "ifc")                  yc="insert_feedback_color";;      # [0xAARRGGBB]
# "layout" | "y")        yc="layout";;           # [bsp|stack|float]
# "ms1")                  yc="mouse_action1";;              # [move|resize]
# "ms2")                  yc="mouse_action2";;              # [move|resize]
# "msda")                 yc="mouse_drop_action";;          # [swap|stack]
# "msm")                  yc="mouse_modifier";;             # [cmd|alt|shift|ctrl|fn]
# "padb" | "pb")          yc="bottom_padding";;   # [<integer number>]
# "padl" | "pl")          yc="left_padding";;     # [<integer number>]
# "padr" | "pr")          yc="right_padding";;    # [<integer number>]
# "padt" | "pt")          yc="top_padding";;      # [<integer number>]
# "sr")                   yc="split_ratio";;                # [<FLOAT_SEL>]
# "wabc")                 yc="active_window_border_color";; # [0xAARRGGBB]
# "waop")                 yc="active_window_opacity";;      # [<FLOAT_SEL>]
# "wb")                   yc="window_border";;              # [<BOOL_SEL>]
# "wbw")                  yc="window_border_width";;        # [<even integer number>]
# "wnbc")                 yc="normal_window_border_color";; # [0xAARRGGBB]
# "wnop")                 yc="normal_window_opacity";;      # [<FLOAT_SEL>]
# "wop")                  yc="window_opacity";;             # [<BOOL_SEL>]
# "wopd")                 yc="window_opacity_duration";;    # [<floating point number>]
# "wp")                   yc="window_placement";;           # [first_child|second_child]
# "ws")                   yc="window_shadow";;              # [<BOOL_SEL>|float]
# "wtm")                  yc="window_topmost";;             # [<BOOL_SEL>]

cfg_wp() {
    if test $1 = "1"; then
        wmc wp "first_child"
    elif test $1 = "2"; then
        wmc wp "second_child"
    fi
}

case "$1" in
    "cwp") grid_big_left_double_right;;
esac
# ---------------------------------- #
#           SPACE COMMANDS           #
# ---------------------------------- #

# LABEL       := arbitrary string/text used as an identifier
# LAYER       := below | normal | above
# RULE_SEL    := <index> | LABEL
# SIGNAL_SEL  := <index> | LABEL
# DIR_SEL     := north | east | south | west
# STACK_SEL   := stack.prev | stack.next | stack.first | stack.last | stack.recent
sel() {
    echo "sel help"
    # WINDOW_SEL  := prev | next | first | last | recent | mouse | largest | smallest | STACK_SEL | DIR_SEL | <window id>
    # DISPLAY_SEL :=                                             | DIR_SEL | <arrangement index (1-based)>
    # SPACE_SEL   :=                                             | <mission-control index (1-based)> | LABEL

    # $1= w | d | s

    # base              p n f l rc m lg sm
    # stack sel         sp sn sf sl sr
    # dir sel           l u d r
    # wid/arridx/mcidx  if number
    # title/label ??          other string
}

# create desktop, move window andK follow focus - uses jq for parsing json (brew install jq)
# shift + cmd - n : yabai -m space --create && \
#                   index="$(yabai -m query --spaces --display | jq 'map(select(."native-fullscreen" == 0))[-1].index')" && \
#                   yabai -m window --space "${index}" && \
#                   yabai -m space --focus "${index}"

# "focus" | "f")    ycmd="--focus" ;; # <SPACE_SEL>
space_focus() {
    #
    wms f $1
}
# "destroy" | "rm")  ycmd="--destroy"; yss=$2 ;; # NOTE: space needs to come before here?!
# "move" | "mv")     ycmd="--move" ;; # <SPACE_SEL>                        Move position of the selected space to the position of the given space. The selected space and given space must both belong to the same display.
# space_move() {}
# "swap" | "sw")     ycmd="--swap" ;; # <SPACE_SEL>                        Swap the selected space with the given space. The selected space and given space must both belong to the same display.
# space_swap() {}
# "display" | "dsp") ycmd="--display" ;; # <DISPLAY_SEL>                           Send the selected space to the given display.
# "balance" | "bl")  ycmd="--balance" ;; # Adjust the split ratios of the selected space so that all windows occupy the same area.
space_mirror() {
    case "$1" in
        "x") wms mir "x-axis" $2;;
        "y") wms mir "y-axis" $2;;
    esac
}

space_rotate() {
    case "$1" in
        "1" | "+")  wms rot 90  $2;;
        "2" | "++") wms rot 180 $2;;
        "3" | "-")  wms rot 270 $2;;
    esac
}

# "toggle" | "t")   ycmd="--toggle" ;; # padding|gap|mission-control|show-desktop Toggle space setting on or off for the selected space.
# "layout" | "y")   ycmd="--layout" ;; # bsp|stack|float                          Set the layout of the selected space.
# "label" | "n")    ycmd="--label" ;; # [<LABEL>]                                 Label the selected space, allowing that label to be used as an alias in commands that take a SPACE_SEL parameter. If the command is called without an argument it will try to remove a previously assigned label.


set_gap() {
    # test $1 = "a" && wms g abs:$2 || test $1 = "r" && wms g rel:$2;
    test $1 = "a" && wms g abs:$2
    test $1 = "r" && wms g rel:$2
}

set_pad() {
    test $1 = "a" && wms p abs:$2:$2:$2:$2
    test $1 = "r" && wms p rel:$2:$2:$2:$2
}

set_spacing() { set_pad $1 $2; set_gap $1 $2; }

toggle_spacing() { wms t padding && wms t gap; }

case "$1" in
    "sg") set_gap $2 $3;;
    "sp") set_pad $2 $3;;
    "ss") set_spacing $2 $3;;
    "sst") toggle_spacing $2;;
    "sr") space_rotate $2 $3;;
    "sm") space_mirror $2 $3;;
    # "gr") gap_resize $2;;
esac

space_kill() { wms f prev; wms --destroy recent; }

move_win_to_monitor() { wmw d $1; wmd $1; } # <DISPLAY_SEL>

move_win_to_space() { wmw s $1; wms f $1; } # <SPACE_SEL>

# create desktop, move window and follow focus
create_desktop() {
    wms c
    id=$(wmq d d | grep "spaces")
    wmw s $(echo ${id:10:${#id}-10})
    wms f $(echo ${id:10:${#id}-10})
}


# wmq w | jq 'map(select(."is-native-fullscreen" == false))[-1].index'

# # create desktop, move window and follow focus - uses jq for parsing json (brew install jq)
# shift + cmd - n : yabai -m space --create && \
# index="$(yabai -m query --spaces --display | jq 'map(select(."is-native-fullscreen" == false))[-1].index')" && \
#                   yabai -m window --space "${index}" && \
#                   yabai -m space --focus "${index}" && \
#                   spacebar -m config spaces on

# # create desktop and follow focus - uses jq for parsing json (brew install jq)
# cmd + alt - n : yabai -m space --create && \
#                 index="$(yabai -m query --spaces --display | jq 'map(select(."is-native-fullscreen" == false))[-1].index')" && \
#                 yabai -m space --focus "${index}"

# ------------------------------------------- #
#               WINDOW COMMANDS               #
# ------------------------------------------- #

# "focus" | "f")         yabai_cmd="--focus";; # <WINDOW_SEL>
# "swap" | "sw")          yabai_cmd="--swap";; # <WINDOW_SEL>
# "warp" | "wrp")         yabai_cmd="--warp";; # <WINDOW_SEL>
# "stack" | "stk")        yabai_cmd="--stack";; # <WINDOW_SEL>
# "insert" | "in")        yabai_cmd="--insert";; # <DIR_SEL>|stack
# "grid" | "g")          yabai_cmd="--grid";; # <rows>:<cols>:<start-x>:<start-y>:<width>:<height>
# "move" | "mv")          yabai_cmd="--move";; # abs|rel:<dx>:<dy>
# "resize" | "rz")        yabai_cmd="--resize";; # top|left|bottom|right|top_left|top_right|bottom_right|bottom_left|abs:<dx>:<dy>
# "ratio" | "rt")         yabai_cmd="--ratio";; # rel|abs:<dr>
# "toggle" | "t")         yabai_cmd="--toggle";; # float|sticky|topmost|pip|shadow|border|split|zoom-parent|zoom-fullscreen|native-fullscreen|expose
# "layer" | "ly")         yabai_cmd="--layer";; # <LAYER>
# "opacity" | "o")        yabai_cmd="--opacity";; # <floating point number>
# "display" | "d")        yabai_cmd="--display";; # <DISPLAY_SEL>
# "space" | "s")          yabai_cmd="--space";; # <SPACE_SEL>
# "minimize" | "mz")      yabai_cmd="--minimize";;
# "deminimize" | "dmz")   yabai_cmd="--deminimize";;
# "close" | "c")          yabai_cmd="--close" ;;

# ---------------------------------- #
#       WINDOW TOGGLE FLOATS         #
# ---------------------------------- #

# TODO:
#
# if bsp >> store position and float
# if float >> restore pos and set bsp

toggle_float_restore() {
    wmw t float && /tmp/yabai-restore/$(wmq w w | jq -re '.id').restore 2>/dev/null || true
    wmw t float && wmw g 4:4:1:1:2:2
}

# this acieves
toggle_layout_float() {
    current_layout=$(wmq s s | jq -r '.type')
    grid_opt=$1
    if test "$current_layout" = "bsp"; then
        wms y "float"
        apply_grid "$grid_opt"
    else
        wms y "bsp"
    fi
}

toggle_pict_in_pict() { wmw t border && wmw t pip; }

toggle_sticky_float_pic_in_pic() { wms y "float"; wmw t sticky; wmw g 5:5:4:0:1:1; }

case "$1" in
    "ty") toggle_layout_float $2;;
    # "gr") gap_resize $2;;
    "tfr") toggle_float_restore;;
    "tpip") toggle_pict_in_pict;;
    "tsfpip") toggle_sticky_float_pic_in_pic;;
esac

# ---------------------------------- #
#               WINDOW               #
# ---------------------------------- #

apply_grid() {
    case "$1" in

        "cf" | "") wmc y float; wmw g 1:1:0:0:1:1 $2;;
        "cb") wmw g 8:8:1:1:6:6 $2;;
        "cm") wmw g 4:4:1:1:2:2 $2;;
        "cs") wmw g 3:3:1:1:1:1 $2;;
        "cw") wmw g 8:8:1:2:6:4 $2;;
        "cww") wmw g 8:8:1:3:6:2 $2;;

        "l") wmw g 1:2:0:0:1:1 $2;;
        "u") wmw g 2:1:0:0:1:1 $2;;
        "d") wmw g 2:1:1:1:1:1 $2;;
        "r") wmw g 1:2:1:0:1:1 $2;;
        "ul") wmw g 2:2:0:0:1:1 $2;;
        "ur") wmw g 2:2:1:0:1:1 $2;;
        "dl") wmw g 2:2:0:1:1:1 $2;;
        "dr") wmw g 2:2:1:1:1:1 $2;;

        "23a") wmw g 2:3:0:0:1:1;;
        "23b") wmw g 2:3:1:0:1:1;;
        "23c") wmw g 2:3:2:0:1:1;;
        "23d") wmw g 2:3:0:1:1:1;;
        "23e") wmw g 2:3:1:1:1:1;;
        "23f") wmw g 2:3:2:1:1:1;;

        "23ul") wmw g 2:3:0:0:2:1;;
        "23ur") wmw g 2:3:1:0:2:1;;
        "23dl") wmw g 2:3:0:1:2:1;;
        "23dr") wmw g 2:3:1:1:2:1;;

        "33cl") wmw g 1:3:0:0:1:1;;
        "33cl2") wmw g 1:3:0:0:2:1;; # two wide
        "33cm") wmw g 1:3:1:0:1:1;;
        "33cr") wmw g 1:3:2:0:1:1;;
        "33cr2") wmw g 1:3:1:0:2:1;; # two wide

        "33ul") wmw g 3:3:0:0:2:2;;
        "33ur") wmw g 3:3:1:0:2:2;;
        "33dl") wmw g 3:3:0:1:2:2;;
        "33dr") wmw g 3:3:1:1:2:2;;

        # "r1") wmw g "3:3:$2:$3:2:1";;
        # "c1") wmw g "3:3:$2:$3:1:2";;

        *) # custom setting
            r=$(echo "$1" | cut -c 1)
            c=$(echo "$1" | cut -c 2)
            x=$(echo "$1" | cut -c 3)
            y=$(echo "$1" | cut -c 4)
            w=$(echo "$1" | cut -c 5)
            h=$(echo "$1" | cut -c 6)
            echo "wmw g $r:$c:$x:$y:$w:$h $2"
            wmw g $r:$c:$x:$y:$w:$h $2
            ;;
    esac

}

# @param fraction multiplier
win_set_ratio() {
    # inst_ceiling=$(( 1/$2 + $new_num))
    test $1 = "a" && wmw rt "abs:$2"
    test $1 = "r" && wmw rt "rel:$2"
    # todo: if k >> increase
    # todo: if j >> decrease
}

# here string is broken at whitespace.
win_focus() {
    name="$@" # prevent input quote enclosed string to be split by whitespace defalt
    aid=($(jq_w_ids_by_app_name "$name"))
    wmw f "${aid[0]}"
}

win_swap() {
    name="$@" # prevent input quote enclosed string to be split by whitespace defalt
    aid=($(jq_w_ids_by_app_name "$name"))
    wmw sw "${aid[0]}"
}

win_warp() {
    name="$@" # prevent input quote enclosed string to be split by whitespace defalt
    aid=($(jq_w_ids_by_app_name "$name"))
    wmw wrp "${aid[0]}"
}

# plus / minus
# abs / rel
# x / y
win_move() {
    # abs|rel:<dx>:<dy>
    wmw mv
}



# TODO:
#
# get window by title
#   set layout for window to float
#       apply_grid

alacritty_num_grid() {
    test "${1}" = "1" && local num="" || local num="_${1}"
    title="Alacritty${num}"
    echo "tt: $title"
    wid=$(jq_win_ids_by_key "title" "$title")
    apply_grid $2 $wid
}

case "$1" in
    "wf") win_focus $2;;
    "wr") win_set_ratio $2 $3;;
esac

# ---------------------------------- #
#          CUSTOM LAUNCHER           #
# ---------------------------------- #

# TODO: BALUPTON QUESTION
#
# 1. how can I pass the launcher command string to alacritty
#       https://stackoverflow.com/questions/2005192/how-to-execute-a-bash-command-stored-as-a-string-with-quotes-and-asterisk#32280085
#       http://mywiki.wooledge.org/BashFAQ/050
# 2. how would I get the return value from this??
#       https://unix.stackexchange.com/questions/65618/bash-script-wait-for-processes-and-get-return-code
#       https://stackoverflow.com/questions/356100/how-to-wait-in-bash-for-several-subprocesses-to-finish-and-return-exit-code-0
# 3. preserve string param
#       interesting thread -> https://stackoverflow.com/questions/1668649/how-to-keep-quotes-in-bash-arguments
#           dorothy command >> param-quoted??
#
# Example:
#
# EX 1
#
#   Search for "br" and it returns "Brave Browser.app"
#   get id based on name string app/title/label
#   send to destination
#   follow focus
#   apply layout
#       do whatever...
#
# EX 2
#
# Use terminal as a global popup > capture inputed string into variable
# >>> WHY???
#       Make possible to supply text strings to kmonad command process since tty is not
#           possible here, ie. we need to open a new term window.
#
#       That would be pretty cool, because then you could bind launch command to kmonad key
#       and then process further.

launch_filter() {
    cmd=( find /System/Library/CoreServices /System/Applications /Applications /System/Applications/Utilities -maxdepth 1 -name "*.app" "|" fzf "|" xargs -I {} open "{}")
    echo "${cmd[@]}"
}

# - custom launcher || predefined app command, eg. term_new
wm_custom_launcher() {
    local TITLE=wm_custom_launcher # ignore this title in yabairc
    open -n -a "/Applications/Alacritty.app" \
        --args -t "${TITLE}" \
        -e "launcher-filter" # todo: atm this is another script. how do ri get LAUNCH_FILTER to work??
        # -e launch_filter

    # APPLY FLOAT CENTER LAYOUT
    local wid="$(jq_win_ids_by_key "title" "$title")"
    wmc y "float" $wid
    apply_grid "cb" $wid

    # SET OPEN NEXT WIN OPTIONS
    cfg_wp "${1-1}"
    wmc sr "${2-0.5}"
}

# # LAUNCHER POPUP

# TITLE=bin_custom_launcher # ignore this title in yabairc
# SCREEN_WIDTH=`yabai -m query --displays --display | jq .frame.w*2`
# SCREEN_HEIGHT=`yabai -m query --displays --display | jq .frame.h*2`
# TERM_WIDTH=1280
# TERM_HEIGHT=1260
# let "X=SCREEN_WIDTH/2-TERM_WIDTH/2"
# let "Y=SCREEN_HEIGHT/2-TERM_HEIGHT/2"
# alacritty \
#   -t "${TITLE}" -o window.position.x="${X}" -o window.position.y="${Y}" \
#   -o window.dimensions.lines=35 -o window.dimensions.columns=80 \
#   -o window.decorations=none --working-directory "$(pwd)" -e "$1" \
#   -o colors.primary.background="#74B573" # customizing colors is not working for me


# ---------------------------------- #
#          FLOAT SYS ADMIN           #
# ---------------------------------- #

# create new floating window and run program XXX

# use bsp layers -> put new prog in top layer???
# add custom gap to layer > split windows???



# ---------------------------------- #
#            TERMINAL FUN            #
# ---------------------------------- #

# TODO:

# if prev num == 0

term_new() {
    local start=$1
    local end=$2
    for (( c=$start; c<=$end; c++ )); do
        local title="${new_name}_${c}"
        echo "title: $title"
        open -n -a "/Applications/Alacritty.app" --args -t "${title}"
    done # refresh rules
}

terms_remove() {
    echo "todo"
}

# @param wp sr num_new
terms_add() {
    local aid=($(jq_w_ids_by_app_name "Alacritty"))
    local aid_ct=${#aid[@]}
    local aid_ct_new=$(($aid_ct + 1))
    local new_name="Alacritty"

    local new_num=$1
    cfg_wp $2

    local ratio
    if test $2 = "1"; then
        ratio=$3
    elif test $2 = "2"; then
        ratio=$(bc <<< "scale=2; 1-${3}")
    fi

    # echo "wmc sr ${ratio:-.5}"
    wmc sr "${ratio:-.5}"

    inst_ceiling=$(( $aid_ct + $new_num))
    term_new $aid_ct_new $inst_ceiling
}

# wmw rb  d

# specify how many terminal instances I want
# @param n
set_term_inst_num() {
    local aid=($(jq_w_ids_by_app_name "Alacritty"))
    local aid_ct=${#aid[@]}
    local aid_ct_new=$(($aid_ct + 1))
    # new_title="Alacritty_$aid_ct_new"
    local new_name="Alacritty"
    local inst_ceiling=$1
    echo "${#aid[@]} >>> ( ${aid[@]} )"


    if [ "$aid_ct" -lt $inst_ceiling ]; then

        # TODO: if too few > then add
        # num_init=$(( 3 - $aid_ct ))
        term_new $aid_ct_new $inst_ceiling

        # TODO: too many terminals > remove
        # elif [ "$aid_ct" -lt $inst_ceiling ]; then
        #     echo "todo rm instances.."

        fi
    }

# ---------------------------------- #
#           CUSTOM LAYOUTS           #
# ---------------------------------- #

# done with grid
grid_big_left_double_right() {
    num_inst=3
    set_term_inst_num $num_inst
    alacritty_num_grid 1 230022
    alacritty_num_grid 2 232011
    alacritty_num_grid 3 232111
}

# # WHY THIS DOESN'T WORK??
# test_setup_terminal() {
#     aid=($(jq_w_ids_by_app_name "$1"))
#     echo "${#aid[@]}"
#     for i in ${!aid[@]}; do
#         # echo "$c > $i"
#         echo "aid $i = ${aid[i]}"
#         # apply_grid 332023 1672
#         case $i in
#             "0" )  apply_grid 330013 "${aid[i]}";;
#             "1" )  apply_grid 332023 "${aid[i]}";;
#             *) echo "* $i";;
#         esac
#     done
#     # 2 add new terminals
#     # /Applications/Kitty.app/Contents/MacOS/kitty --single-instance -d ~
# }

# ---------------------------------- #
#                RULES               #
# ---------------------------------- #

reset_all_rules() { for i in $(seq 1 $(wmr ls | jq 'length')); do wmr rm 0; done; }

# ---------------------------------- #
#               EVENTS               #
# ---------------------------------- #

reset_all_events() { for i in $(seq 1 $(wme ls | jq 'length')); do wme rm 0; done; }


############################################################

# expand-q() { for i; do echo ${*@Q}; done; }
# expand-q $2
# echo "qq> ${2@Q}"
# echo "2 > $2"
# echo "3 > $3"

############################################################

case "$1" in
    "layout_1") grid_big_left_double_right;;
    "wsa") jq_w_sel_by_app "$2";; # make sure argument is sent as quoted string
    "wtba") jq_w_titles_by_app $2;;
    "l") wm_custom_launcher $2 $3;;
    "tn") set_term_inst_num $2;;
    # "ta") terms_add $2 $3 $4;;
    "ta") terms_add ${@:2};;
    # "trm") terms_add $2;;
    "ts") alacritty_num_grid $2 $3;;
    "tt") test_setup_terminal $2;;
    # "h") apply_grid "cf";; # l u d R
    "ag") apply_grid $2 $3;;
    "fs") apply_grid "cf";;
    "gk") get_key $2;;
    # "b") win_set_grid_22 $2 $3 $4 $5;;
    # "c")  win_set_grid_33 $2 $3 $4 $5;;
    "g")  apply_grid $2 $3;;
    # *) apply_grid "cf";;
esac
