#!/usr/bin/env bash

# M1 support -> https://github.com/koekeishiya/yabai/issues/725
# https://github.com/koekeishiya/yabai/wiki/Installing-yabai-(latest-release)
# https://github.com/koekeishiya/yabai/wiki/Disabling-System-Integrity-Protection

# ::: NOTE: SIP DISABLE REQUIREMENTS :::
# SILICON | macOS 12.x.x           ->   `csrutil disable --with kext --with dtrace --with basesystem`               # Filesystem Protections, Debugging Restrictions and NVRAM Protection. (** printed warning can be safely ignored)
# INTEL   | macOS 12.x.x / 11.x.x  ->   `csrutil disable --with kext --with dtrace --with nvram --with basesystem`  # Filesystem Protections and Debugging Restrictions (workaround because --without debug does not work). (**)
# INTEL   | macOS 10.14 / 10.15    ->   `csrutil enable --without debug --without fs`                               # Filesystem Protections and Debugging Restrictions. (**)
# INTEL   | macOS 10.13            ->   `csrutil disable`                                                           # (disables SIP completely)

# ::: NOTE: LOAD _SCRIPTING_ADDITION_ :::
# THIS IS NECESSARY FOR FULL FEATURES
# sudo yabai --install-sa && yabai --load-sa
# BIG SUR REQUIRES MANUAL LOADING OF `SA`
# # replace <user> with your username (output of: whoami).
# sudo visudo -f /private/etc/sudoers.d/yabai <<< `<user> ALL = (root) NOPASSWD: /usr/local/bin/yabai --load-sa`
# ::: NOTE: UPDATING YABAI :::
# brew services stop yabai
# brew upgrade yabai
# sudo yabai --uninstall-sa
# sudo yabai --install-sa
# brew services start yabai

# ::: LAUNCHER POPUP ::::::

# WMU
# wmr a n="cust_launch" t='bin_custom_launcher' mg=off st=on y=above b=off

# # LAUNCHER FILTER
# find /System/Library/CoreServices /System/Applications /Applications /System/Applications/Utilities -maxdepth 1 -name "*.app" | fzf | xargs -I {} open "{}"

# # LAUNCHER POPUP
# TITLE=bin_custom_launcher # ignore this title in yabairc
# SCREEN_WIDTH=`yabai -m query --displays --display | jq .frame.w*2`
# SCREEN_HEIGHT=`yabai -m query --displays --display | jq .frame.h*2`
# TERM_WIDTH=1280
# TERM_HEIGHT=1260
# let "X=SCREEN_WIDTH/2-TERM_WIDTH/2"
# let "Y=SCREEN_HEIGHT/2-TERM_HEIGHT/2"
# alacritty \
#   -t "${TITLE}" -o window.position.x="${X}" -o window.position.y="${Y}" \
#   -o window.dimensions.lines=35 -o window.dimensions.columns=80 \
#   -o window.decorations=none --working-directory "$(pwd)" -e "$1" \
#   -o colors.primary.background="#74B573" # customizing colors is not working for me


# ::: QUESTIONS :::::::

# - how us split to slip window into smaller and smaller chunks.

# - change split ration of managed windows

# ::: HELPERS :::::::::::::::::::::::::::::::::

jq_w_filter_keys(){ wmq w | jq "map(.\"$1\")"; }

jq_w_sel_by_app(){ wmq w | jq "map(select(.\"app\" == \"$1\"))"; }

jq_w_titles_by_app(){ wmq w | jq "map(select(.\"app\" == \"$1\").title)" | tr -d '[],"'; }

jq_win_ids_by_key(){ wmq w | jq "map(select(.\"$1\" == \"$2\").id)" | tr -d '[],"'; }

jq_w_ids_by_app_name(){  wmq w | jq "map(select(.\"app\" == \"$1\").id)" | tr -d '[],"'; }

# aidtr=($(echo $aid | tr -d '[],"'))

# jq_w_sel_by_key(){ wmq w | jq "map(select(.\"app\" == \"$1\")).$2"; }

# wmw t float && /tmp/yabai-restore/$(wmq w w | jq -re '.id').restore 2>/dev/null || true

# index="$(yabai -m query --spaces --display | jq 'map(select(."is-native-fullscreen" == false))[-1].index')" && \

# toggle active window
# wmq s s | jq -r 'if .type == "bsp" then "float" else "bsp" end')

# ::: WINDOW FUNCTIONS :::::::::::::::::::::::::::::::::

apply_grid() {
    case "$1" in

        "cf" | "") wmc y float; wmw g 1:1:0:0:1:1 $2;;
        "cb") wmw g 8:8:1:1:6:6 $2;;
        "cm") wmw g 4:4:1:1:2:2 $2;;
        "cs") wmw g 3:3:1:1:1:1 $2;;
        "cw") wmw g 8:8:1:2:6:4 $2;;
        "cww") wmw g 8:8:1:3:6:2 $2;;

        "l") wmw g 1:2:0:0:1:1 $2;;
        "u") wmw g 2:1:0:0:1:1 $2;;
        "d") wmw g 2:1:1:1:1:1 $2;;
        "r") wmw g 1:2:1:0:1:1 $2;;
        "ul") wmw g 2:2:0:0:1:1 $2;;
        "ur") wmw g 2:2:1:0:1:1 $2;;
        "dl") wmw g 2:2:0:1:1:1 $2;;
        "dr") wmw g 2:2:1:1:1:1 $2;;

        "23a") wmw g 2:3:0:0:1:1;;
        "23b") wmw g 2:3:1:0:1:1;;
        "23c") wmw g 2:3:2:0:1:1;;
        "23d") wmw g 2:3:0:1:1:1;;
        "23e") wmw g 2:3:1:1:1:1;;
        "23f") wmw g 2:3:2:1:1:1;;

        "23ul") wmw g 2:3:0:0:2:1;;
        "23ur") wmw g 2:3:1:0:2:1;;
        "23dl") wmw g 2:3:0:1:2:1;;
        "23dr") wmw g 2:3:1:1:2:1;;

        "33cl") wmw g 1:3:0:0:1:1;;
        "33cl2") wmw g 1:3:0:0:2:1;; # two wide
        "33cm") wmw g 1:3:1:0:1:1;;
        "33cr") wmw g 1:3:2:0:1:1;;
        "33cr2") wmw g 1:3:1:0:2:1;; # two wide

        "33ul") wmw g 3:3:0:0:2:2;;
        "33ur") wmw g 3:3:1:0:2:2;;
        "33dl") wmw g 3:3:0:1:2:2;;
        "33dr") wmw g 3:3:1:1:2:2;;

        # "r1") wmw g "3:3:$2:$3:2:1";;
        # "c1") wmw g "3:3:$2:$3:1:2";;

        *) # custom setting
            r=$(echo "$1" | cut -c 1)
            c=$(echo "$1" | cut -c 2)
            x=$(echo "$1" | cut -c 3)
            y=$(echo "$1" | cut -c 4)
            w=$(echo "$1" | cut -c 5)
            h=$(echo "$1" | cut -c 6)
            echo "wmw g $r:$c:$x:$y:$w:$h $2"
            wmw g $r:$c:$x:$y:$w:$h $2
            ;;
    esac

}
# gap functions

gap_set() { wms p abs:$1:$1:$1:$1 && wms g abs:$1; }

gap_resize() { wms p rel:$1:$1:$1:$1 && wms g rel:$1; } # +/- integer

toggle_gap() { wms t padding && wms t gap; }
# test "${1-}" = "gt" && toggle_gap

case "$1" in
    "gs") gap_set $2;;
    "gr") gap_resize $2;;
esac

space_kill() { wms f prev; wms --destroy recent; }

move_win_to_monitor() { wmw d $1; wmd $1; } # <DISPLAY_SEL>

move_win_to_space() { wmw s $1; wms f $1; } # <SPACE_SEL>

# create desktop, move window and follow focus
create_desktop() {
    wms c
    id=$(wmq d d | grep "spaces")
    wmw s $(echo ${id:10:${#id}-10})
    wms f $(echo ${id:10:${#id}-10})
}


# wmq w | jq 'map(select(."is-native-fullscreen" == false))[-1].index'

# # create desktop, move window and follow focus - uses jq for parsing json (brew install jq)
# shift + cmd - n : yabai -m space --create && \
# index="$(yabai -m query --spaces --display | jq 'map(select(."is-native-fullscreen" == false))[-1].index')" && \
#                   yabai -m window --space "${index}" && \
#                   yabai -m space --focus "${index}" && \
#                   spacebar -m config spaces on

# # create desktop and follow focus - uses jq for parsing json (brew install jq)
# cmd + alt - n : yabai -m space --create && \
#                 index="$(yabai -m query --spaces --display | jq 'map(select(."is-native-fullscreen" == false))[-1].index')" && \
#                 yabai -m space --focus "${index}"

toggle_float_center() { wmw t float && wmw g 4:4:1:1:2:2; }

toggle_float_restore() {
    wmw t float && /tmp/yabai-restore/$(wmq w w | jq -re '.id').restore 2>/dev/null || true
    wmw t float && wmw g 4:4:1:1:2:2
}

toggle_layout_float() {
    current_layout=$(wmq s s | jq -r '.type')
    grid_opt=$1
    if test "$current_layout" = "bsp"; then
        wms y "float"
        apply_grid "$grid_opt"
    else
        wms y "bsp"
    fi
}

toggle_pict_in_pict() { wmw t border && wmw t pip; }

toggle_sticky_float_pic_in_pic() { wmw t sticky; wmw g 5:5:4:0:1:1; }

case "$1" in
    "ty") toggle_layout_float $2;;
    # "gr") gap_resize $2;;
esac

fill_screen() { wmw g 1:1:0:0:1:1; }

fill_3_by_3() {
    echo "> $@"
    case "$1" in
        "r1") wmw g "3:3:$2:$3:2:1";;
        "c1") wmw g "3:3:$2:$3:1:2";;
        *) echo "NO_MATCH";;
    esac
}


get_key() {
    # echo "!"
    jq_w_filter_keys $1
}

# here string is broken at whitespace.
focus_app_name() {
    name="$@" # prevent input string to bli split by whitespace defalt
    aid=($(jq_w_ids_by_app_name "$name"))
    wmw f "${aid[0]}"
}

# TODO:
#
# get window by title
#   set layout for window to float
#       apply_grid

alacritty_num_grid() {
    test "${1}" = "1" && local num="" || local num="_${1}"
    title="Alacritty${num}"
    echo "tt: $title"
    wid=$(jq_win_ids_by_key "title" "$title")
    apply_grid $2 $wid
}

# specify how many terminal instances I want
# @param n
set_term_inst_num() {
    aid=($(jq_w_ids_by_app_name "Alacritty"))
    aid_ct=${#aid[@]}
    aid_ct_new=$(($aid_ct + 1))
    # new_title="Alacritty_$aid_ct_new"
    new_name="Alacritty"
    inst_ceiling=$1
    echo "${#aid[@]} >>> ( ${aid[@]} )"

    if [ "$aid_ct" -lt $inst_ceiling ]; then
        num_init=$(( 3 - $aid_ct ))
        for (( c=$aid_ct_new; c<=$inst_ceiling; c++ )); do
            local title="${new_name}_${c}"
            echo "title: $title"
            open -n -a "/Applications/Alacritty.app" --args -t "${title}"
            # wmr rm 0;
        done # refresh rules
    fi
    # alacritty -t "${TITLE}"
    # -o window.position.x="${X}" -o window.position.y="${Y}" \
    #   -o window.dimensions.lines=35 -o window.dimensions.columns=80 \
    #   -o window.decorations=none --working-directory "$(pwd)" -e "$1" \
    #   -o colors.primary.background="#74B573" # customizing colors is not working for me
}

grid_big_left_double_right() {
    num_inst=3
    set_term_inst_num $num_inst
    alacritty_num_grid 1 230022
    alacritty_num_grid 2 232011
    alacritty_num_grid 3 232111
}

# WHY THIS DOESN'T WORK??
test_setup_terminal() {
    aid=($(jq_w_ids_by_app_name "$1"))
    echo "${#aid[@]}"
    for i in ${!aid[@]}; do
        # echo "$c > $i"
        echo "aid $i = ${aid[i]}"

        # apply_grid 332023 1672

        case $i in
            "0" )  apply_grid 330013 "${aid[i]}";;
            "1" )  apply_grid 332023 "${aid[i]}";;
            *) echo "* $i";;
        esac

    done
    # 2 add new terminals
    # /Applications/Kitty.app/Contents/MacOS/kitty --single-instance -d ~
}


############################################################

case "$1" in
    "layout_1") grid_big_left_double_right;;
    "wsa") jq_w_sel_by_app $2;;
    "wtba") jq_w_titles_by_app $2;;
    "at") set_term_inst_num $2;;
    "ts") alacritty_num_grid $2 $3;;
    "tt") test_setup_terminal $2;;
    "fan") focus_app_name $2;;
    # "h") apply_grid "cf";; # l u d R
    "a") apply_grid "cf";;
    "gk") get_key $2;;
    # "b") win_set_grid_22 $2 $3 $4 $5;;
    # "c")  win_set_grid_33 $2 $3 $4 $5;;
    "g")  apply_grid $2 $3;;
    "23") fill_2_by_3 $2;; # l u d r
    "33") fill_3_by_3 $2 $3 $4;;
    "tfc") toggle_float_center;;
    "tfr") toggle_float_restore;;
    "tfl") toggle_layout_float;;
    "tpip") toggle_pict_in_pict;;
    "tsfpip") toggle_sticky_float_pic_in_pic;;
    # *) apply_grid "cf";;
esac
