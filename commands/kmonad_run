#!/usr/bin/env bash

# @todo
#   - use $KMO_LAYOUT_DIR > if exists, else check in config/kmonad
#   - add dorothy help file.
#   - dorothy flags while

# # ensure valid layout path
# action="$(
# 	choose-option --required \
# 		--question='which action to perform?' \
# 		--filter="$action" -- "${actions[@]}"
# )"


# index a string in bash
# https://unix.stackexchange.com/questions/303960/index-a-string-in-bash

# script_path=$(realpath $0)
# config_kmonad_dir=$(dirname $script_path)
# config_kmonad_dir2="${BASH_SOURCE%/*}"
config_kmonad_dir="$XDG_CONFIG_HOME/kmonad"
bin_dir="$HOME/.local/bin"

# --------------------------
# ---       CHOOSE       ---
# --------------------------

# FIX: if mac use current method, else check if kmonad exists

# use exec path to run.
bin_exec_paths=($(find $bin_dir | grep "kmonad"))
kmo_exec_path="$(choose-option --confirm --question='Select executable name.' -- "${bin_exec_paths[@]}")"

user_hardwares_list=(
    "ergo"
    "pro"
    "air"
)

# select which hardware you want to run kmonad on.
hw="$(choose-option --confirm --question='Select hardware to run kmonad for.' -- "${user_hardwares_list[@]}")"

# if test -z ${1-}; then
#     # echo-style --error='[setup-mac] is only intended to be run on macOS systems...'
#     echo "No input specified. You need to specify what key board"
#     echo "you want to run kmonad for."
#     echo "(ergo|air|pro)"
#     exit 1
# 	# exit 2
# fi

# --------------------------
# ---       cfg       ---
# --------------------------

declare -A defcfg_input_str=(
    [ergo]="Ergodox EZ"
    [pro]="Apple Internal Keyboard / Trackpad"
    [air]="Apple Internal Keyboard / Trackpad"
)

input="${defcfg_input_str[$hw]}"
output="kext"
fallthrough=false

defcfg="(defcfg
    input (iokit-name \"$input\")
    output ($output)
    fallthrough $fallthrough
)"

# --------------------------
# ---       src       ---
# --------------------------

declare -A defsrc_files=(
    [ergo]="defsrc_ergodox.kbd"
    [pro]="defsrc_mbpro_swe.kbd"
    [air]="defsrc_mbair.kbd"
)

defsrc="$config_kmonad_dir/defsrc/${defsrc_files[$hw]}"

# ----------------------------------
# ---      compile and run      ---
# ----------------------------------

function compile_layout() {
    echo "$defcfg"
    cat $defsrc
    # cat "$config_kmonad_dir/common/"*.kbd

    # load my fancy stuff
    for f in "$config_kmonad_dir/common/"*.kbd; do
        local filename="$(basename "$f")"

        # # did not work. complain too many arguments to test
        # if test "${filename:(-5)}"  != '~.kbd' ]]; then
        #     source "$f"
        # fi

        if [[ ! $filename =~ "~.kbd" ]]; then
            cat "$f"
        fi
    done

    # complains about syntax err. dunno what..
    # # load my .sh sources that don't start with ~.
    # for f in "$config_kmonad_dir/common/"!(.*~$).kbd; do
    #     cat "$f"
    # done
}

tmp_file="$(mktemp /tmp/kmonad-XXX)"
compile_layout >$tmp_file

### RUN KMONAD ###

mode="d" # run

# check how to run
for arg in "$@"; do
    if test "$arg" = '--cat' -o "$arg" = '-c'; then
        mode="c"
    elif test "$arg" = '--write' -o "$arg" = '-w'; then
        mode="w" # TODO
    elif test "$arg" = '--run' -o "$arg" = '-r'; then
        mode="r"
    fi
done

if test "$mode" = "r"; then
    # bash
    echo "run"
    sudo $kmo_exec_path $tmp_file --allow-cmd
    # sudo kmonad <(compile_layout) # doesn't work
    # -f doesn't accept `false`. Complains about invalid...
    # kmonad <(compile_layout) -f $fallthrough -i $input -o $output -d

    # zsh
    # sudo kmonad =(compile_layout)

elif test "$mode" = 'c'; then
    echo "[cat tmp_file]"
    cat $tmp_file

elif test "$mode" = 'w'; then
    echo "write layout -> todo..."

elif test "$mode" = 'd'; then
    $kmo_exec_path $tmp_file -d
fi
