#!/usr/bin/env bash

# @todo
#   - use $KMO_LAYOUT_DIR > if exists, else check in config/kmonad
#   - add dorothy help file.
#   - dorothy flags while

# =====================================
# Arguments

# help
function help() {
	cat <<-EOF >/dev/stderr
		ABOUT:
		Copy everything from one location to another, features:
		- preserves attributes

		USAGE:
		cpr [...flags] -- <source> <destination>

		<source> and <destination> can be a local path on your current machine, or a remote path.

		If a remote path, it should be in the format of:
		    [username@hostname:/path] for files
		    [username@hostname:/path/] for directories
		The [hostname] is the hostname or IP address of a valid SSH server.
		If you the remote machine is macOS, you can enable this in System Preferences > Sharing > Remote Login.

		FLAGS:
		[--action=copy|verify] if specified, skips action prompt.
		[--tool=...] if specified, skips tool prompt. Available tools on this machine are:
		    for copy: $(echo-join ', ' -- "${copy_tools[@]}")
		    for verify: $(echo-join ', ' -- "${verify_tools[@]}")
		[--dry] if enabled, only output the determined command, do not run it.
		[--sudo] if enabled, runt he determined command as the sudo user.

		RSYNC FLAGS:
		[--owner=<user>:<group>] if specified, uses this value for the ownership of copied files.
		[--remove] if enabled, remove source files as they are successfully copied to the target.
		[--checksum] if enabled, files are compared by their checksums, instead of the default quicker date and size comparison.
		[--[no-]linux] if enabled, increases compatibility with linux systems.
		[--slashes=adjust|ignore|exit] if specified, skips guidance prompt regarding trailing slashes in paths.
		[--spaces=adjust|ignore|exit] if specified, skips guidance prompt regarding spaces in paths.
	EOF
	if test "$#" -ne 0; then
		echo-style $'\n' --error="ERROR:" $'\n' --red="$(echo-lines -- "$@")" >/dev/stderr
	fi
	return 22 # Invalid argument
}

# process
action=''
config_path=''
option_dry='no'
while test "$#" -ne 0; do
	item="$1"
	shift
	case "$item" in
	'help' | '--help' | '-h') help ;;
	# '--='*) action="${item:9}" ;;
	'--dry-run'* | '-d'*) action="dry" ;;
	'--run'*     | '-r')  action="run" ;;
	'--print'*     | '-l')  action="run" ;;
	'--path='*     | '-p')  config_path="run" ;;
	# '--owner='*) option_owner="${item:8}" ;;
	# '--no-dry'* | '--dry'*)
	# 	option_dry="$(get-flag-value dry --missing="$option_dry" -- "$item" | echo-affirmative)"
	# 	;;
	# '--no-sudo'* | '--sudo'*)
	# 	option_sudo="$(get-flag-value sudo --missing="$option_sudo" -- "$item" | echo-affirmative)"
	# 	;;
	# '--no-checksum'* | '--checksum'*)
	# 	option_checksum="$(get-flag-value checksum --missing="$option_checksum" -- "$item" | echo-affirmative)"
	# 	;;
	# '--no-remove'* | '--remove'*)
	# 	option_remove="$(get-flag-value remove --missing="$option_remove" -- "$item" | echo-affirmative)"
	# 	;;
	# '--no-linux'* | '--linux'*)
	# 	option_linux="$(get-flag-value linux --missing="$option_linux" -- "$item" | echo-affirmative)"
	# 	;;
	# '--slashes='*) option_slashes="${item:10}" ;;
	# '--spaces='*) option_spaces="${item:9}" ;;
	'--') ;;
	'--'*) help "An unrecognised flag was provided: $item" ;;
	*)
		if test -z "$item"; then
			help "Empty path argument provided."
		elif test -z "$option_source"; then
			option_source="$item"
		elif test -z "$option_destination"; then
			option_destination="$item"
		else
			help "An unrecognised argument was provided: $item"
		fi
		;;
	esac
done

# # ensure valid
# action="$(
# 	choose-option --required \
# 		--question='What action to perform?' \
# 		--filter="$action" -- "${actions[@]}"
# )"
# tools=()
# if test "$action" = 'copy'; then
# 	tools=("${copy_tools[@]}")
# else
# 	tools=("${verify_tools[@]}")
# fi
# tool="$(
# 	choose-option --required \
# 		--question='Which tool to use?' \
# 		--filter="$tool" -- "${tools[@]}"
# )"
# if test -z "$option_source"; then
# 	option_source="$(
# 		ask --required \
# 			--question="Enter the source path."
# 	)"
# fi
# if test -z "$option_destination"; then
# 	option_destination="$(
# 		ask --required \
# 			--question="Enter the destination path."
# 	)"
# fi


# # ensure valid layout path
# action="$(
# 	choose-option --required \
# 		--question='which action to perform?' \
# 		--filter="$action" -- "${actions[@]}"
# )"


# index a string in bash
# https://unix.stackexchange.com/questions/303960/index-a-string-in-bash

# script_path=$(realpath $0)
# config_kmonad_dir=$(dirname $script_path)
# config_kmonad_dir2="${BASH_SOURCE%/*}"
config_kmonad_dir="$XDG_CONFIG_HOME/kmonad"
bin_dir="$HOME/.local/bin"

# --------------------------
# ---       CHOOSE       ---
# --------------------------

# use exec path to run.
bin_exec_paths=($(find $bin_dir | grep "kmonad"))
kmo_exec_path="$(choose-option --confirm --question='Select executable name.' -- "${bin_exec_paths[@]}")"

user_hardwares_list=(
    "ergo"
    "pro"
    "air"
)

# select which hardware you want to run kmonad on.
hw="$(choose-option --confirm --question='Select hardware to run kmonad for.' -- "${user_hardwares_list[@]}")"

# if test -z ${1-}; then
#     # echo-style --error='[setup-mac] is only intended to be run on macOS systems...'
#     echo "No input specified. You need to specify what key board"
#     echo "you want to run kmonad for."
#     echo "(ergo|air|pro)"
#     exit 1
# 	# exit 2
# fi

# --------------------------
# ---       cfg       ---
# --------------------------

declare -A defcfg_input_str=(
    [ergo]="Ergodox EZ"
    [pro]="Apple Internal Keyboard / Trackpad"
    [air]="Apple Internal Keyboard / Trackpad"
)

input="${defcfg_input_str[$hw]}"
output="kext"
fallthrough=false

defcfg="(defcfg
    input (iokit-name \"$input\")
    output ($output)
    fallthrough $fallthrough
)"

# --------------------------
# ---       src       ---
# --------------------------

declare -A defsrc_files=(
    [ergo]="defsrc_ergodox.kbd"
    [pro]="defsrc_mbpro_swe.kbd"
    [air]="defsrc_mbair.kbd"
)

defsrc="$config_kmonad_dir/defsrc/${defsrc_files[$hw]}"

# ----------------------------------
# ---      compile and run      ---
# ----------------------------------

compile_layout() {
    echo "$defcfg"
    cat $defsrc
    # cat "$config_kmonad_dir/common/"*.kbd

    # load my fancy stuff
    for f in "$config_kmonad_dir/common/"*.kbd; do
        local filename="$(basename "$f")"

        # # did not work. complain too many arguments to test
        # if test "${filename:(-5)}"  != '~.kbd' ]]; then
        #     source "$f"
        # fi

        if [[ ! $filename =~ "~.kbd" ]]; then
            cat "$f"
        fi
    done

    # complains about syntax err. dunno what..
    # # load my .sh sources that don't start with ~.
    # for f in "$config_kmonad_dir/common/"!(.*~$).kbd; do
    #     cat "$f"
    # done

}

tmp_file="$(mktemp /tmp/kmonad-XXX)"
compile_layout >$tmp_file

### RUN KMONAD ###

mode="d" # run

# check how to run
for arg in "$@"; do
    if test "$arg" = '--cat' -o "$arg" = '-c'; then
        mode="c"
    elif test "$arg" = '--write' -o "$arg" = '-w'; then
        mode="w" # TODO
    elif test "$arg" = '--run' -o "$arg" = '-r'; then
        mode="r"
    fi
done

if test "$mode" = "r"; then
    # bash
    sudo $kmo_exec_path $tmp_file --allow-cmd
    # sudo kmonad <(compile_layout) # doesn't work
    # -f doesn't accept `false`. Complains about invalid...
    # kmonad <(compile_layout) -f $fallthrough -i $input -o $output -d

    # zsh
    # sudo kmonad =(compile_layout)

elif test "$mode" = 'c'; then
    cat $tmp_file

elif test "$mode" = 'w'; then
    echo "write layout -> todo..."

elif test "$mode" = 'd'; then
    $kmo_exec_path $tmp_file -d
fi
