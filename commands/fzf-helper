#!/usr/bin/env bash

# TODO: rename this to `fuzzy-picker`?

# TODO: if no args, then cal a standard general purpose picker with
# all kinds of shenanigans.

# TODO: Support other fuzzy matchers
# ! Use setup utils to install absent commands.
# fzf [x] already exists in dorothy.
# [ ] skim
# [ ] nucleo

function fzf_helper() (
  source "$DOROTHY/sources/bash.bash"

  DEBUG_FZF="yes"

  __print_lines() {
    printf "%s\n" "$1"
  }

  __debug_lines() {
    if (("$DEBUG_FZF" == "yes")); then
      __print_lines "[fzf-helper]: $1"
    fi
  }

  # =======================================================
  # Helpers

  __fzf_cmd__base() {
    # put the default key as configurable
    fzf --height=50% --tmux 90%,70% \
      --layout=reverse --multi --min-height=20 --border \
      --border-label-pos=2 \
      --color='header:italic:underline,label:blue' \
      --preview-window='right,50%,border-left' \
      --bind='ctrl-d:change-preview-window(down,50%,border-top|hidden|)' "$@"
  }

  __fzf_ensure_git_repo() {
    git rev-parse HEAD >/dev/null 2>&1 && return
    [[ -n $TMUX ]] && tmux display-message "Not in a git repository"
    return 1
  }

  # __fzf_git_script=${BASH_SOURCE[0]:-${(%):-%x}}
  # __fzf_git_script=$(readlink -f "$__fzf_git_script" 2> /dev/null || \
  #   /usr/bin/ruby --disable-gems -e 'puts File.expand_path(ARGV.first)' "$__fzf_git_script" 2> /dev/null)

  # Expects optionally one and only one arg $1
  __fzf_git_color() {
    if [[ -n ${NO_COLOR-} ]]; then
      echo never
    elif [[ $# -gt 0 ]] && [[ -n ${FZF_GIT_PREVIEW_COLOR-} ]]; then
      echo "$FZF_GIT_PREVIEW_COLOR"
    else
      echo "${FZF_GIT_COLOR:-always}"
    fi
  }

  __fzf_git_cat() {
    if [[ -n ${FZF_GIT_CAT-} ]]; then
      echo "$FZF_GIT_CAT"
      return
    fi

    local bat_opts=(
      --style="'${BAT_STYLE:-full}'"
      --color="$(__fzf_git_color .)"
      --pager="never"
    )

    # Sometimes bat is installed as batcat
    if command -v batcat >/dev/null; then
      echo "batcat ${bat_opts[*]}"
    elif command -v bat >/dev/null; then
      echo "bat ${bat_opts[*]}"
    else
      echo cat
    fi
  }

  __fzf_git_pager() {
    local pager
    pager="${FZF_GIT_PAGER:-${GIT_PAGER:-$(git config --get core.pager 2>/dev/null)}}"
    echo "${pager:-cat}"
  }

  close_picker() { exit 0; }

  # TODO: move this to its own file command?
  get_git_data() {
    branches() {

      # --format=<format>
      #     A string that interpolates %(fieldname) from a ref being shown and the object it points at.
      #     In addition, the string literal %% renders as % and %xx - where xx are hex digits - renders
      #     as the character with hex code xx. For example, %00 interpolates to \0 (NUL), %09 to \t
      #     (TAB), and %0a to \n (LF).
      #
      #     When unspecified, <format> defaults to %(objectname) SPC %(objecttype) TAB %(refname).

      git branch "$@" --sort=-committerdate --sort=-HEAD \
        --format=$'%(HEAD) %(color:yellow)%(refname:short)\t%(color:green)(%(committerdate:relative))\t%(color:blue)%(subject)%(color:reset)' \
        --color="$(__fzf_git_color)" | column -ts$'\t'
    }
    refs() {
      git for-each-ref "$@" --sort=-creatordate --sort=-HEAD --color=$(__fzf_git_color) --format=$'%(if:equals=refs/remotes)%(refname:rstrip=-2)%(then)%(color:magenta)remote-branch%(else)%(if:equals=refs/heads)%(refname:rstrip=-2)%(then)%(color:brightgreen)branch%(else)%(if:equals=refs/tags)%(refname:rstrip=-2)%(then)%(color:brightcyan)tag%(else)%(if:equals=refs/stash)%(refname:rstrip=-2)%(then)%(color:brightred)stash%(else)%(color:white)%(refname:rstrip=-2)%(end)%(end)%(end)%(end)\t%(color:yellow)%(refname:short) %(color:green)(%(creatordate:relative))\t%(color:blue)%(subject)%(color:reset)' | column -ts$'\t'
    }
    hashes() {
      git log --date=short --format="%C(green)%C(bold)%cd %C(auto)%h%d %s (%an)" --graph --color=$(__fzf_git_color) "$@"
    }
    case "$1" in
    branches)
      echo $'CTRL-O (open in browser) ‚ï± ALT-A (show all branches)\n'
      branches
      ;;
    all-branches)
      echo $'CTRL-O (open in browser)\n'
      branches -a
      ;;
    hashes)
      echo $'CTRL-O (open in browser) ‚ï± CTRL-D (diff)\nCTRL-S (toggle sort) ‚ï± ALT-A (show all hashes)\n'
      hashes
      ;;
    all-hashes)
      echo $'CTRL-O (open in browser) ‚ï± CTRL-D (diff)\nCTRL-S (toggle sort)\n'
      hashes --all
      ;;
    refs)
      echo $'CTRL-O (open in browser) ‚ï± ALT-E (examine in editor) ‚ï± ALT-A (show all refs)\n'
      refs --exclude='refs/remotes'
      ;;
    all-refs)
      echo $'CTRL-O (open in browser) ‚ï± ALT-E (examine in editor)\n'
      refs
      ;;
    nobeep) ;;
    *) exit 1 ;;
    esac
  }

  # TODO: move this to its own file `fzf-helper-actions`
  open_in_browser() {
    # Calling script with multiple args.

    __debug_lines "open in browser"

    # this is only when the scripting is initiating on shell load.
    # maybe should unset the vars instead.
    branch=$(git rev-parse --abbrev-ref HEAD 2>/dev/null)
    if [[ $branch = HEAD ]]; then
      branch=$(git describe --exact-match --tags 2>/dev/null || git rev-parse --short HEAD)
    fi

    # Only supports GitHub for now
    case "$1" in
    commit)
      hash=$(grep -o "[a-f0-9]\{7,\}" <<<"$2")
      path=/commit/$hash
      ;;
    branch | remote-branch)
      branch=$(sed 's/^[* ]*//' <<<"$2" | cut -d' ' -f1)
      remote=$(git config branch."${branch}".remote || echo 'origin')
      branch=${branch#$remote/}
      path=/tree/$branch
      ;;
    remote)
      remote=$2
      path=/tree/$branch
      ;;
    file) path=/blob/$branch/$(git rev-parse --show-prefix)$2 ;;
    tag) path=/releases/tag/$2 ;;
    *) exit 1 ;;
    esac

    remote=${remote:-$(git config branch."${branch}".remote || echo 'origin')}
    remote_url=$(git remote get-url "$remote" 2>/dev/null || echo "$remote")

    if [[ $remote_url =~ ^git@ ]]; then
      url=${remote_url%.git}
      url=${url#git@}
      url=https://${url/://}
    elif [[ $remote_url =~ ^http ]]; then
      url=${remote_url%.git}
    fi

    case "$(uname -s)" in
    Darwin) open "$url$path" ;;
    *) xdg-open "$url$path" ;;
    esac

    close_picker
  }

  # =====================================
  # Act

  # TODO: try
  # --cycle

  act__branches() {
    __fzf_ensure_git_repo || return
    local str_preview_cmd

    str_preview_cmd="git log --oneline --graph --date=short --color=$(__fzf_git_color .) \
            --pretty='format:%C(auto)%cd %h%d %s' \$(sed s/^..// <<< {} | cut -d' ' -f1) --"

    fzf-helper --get-data branches |
      __fzf_cmd__base --ansi \
        --border-label 'üå≤ Branches' \
        --header-lines 2 \
        --tiebreak begin \
        --preview-window down,border-top,40% \
        --color hl:underline,hl+:underline \
        --no-hscroll \
        --bind 'ctrl-/:change-preview-window(down,70%|hidden|)' \
        --bind "ctrl-o:execute-silent:bash fzf-helper --open-in-browser branch {}" \
        --bind "alt-a:change-border-label(üå≥ All branches)+reload:bash fzf-helper --get-data all-branches" \
        --preview "$str_preview_cmd" \
        "$@" | sed 's/^..//' | cut -d' ' -f1
  }

  act__files() {
    __fzf_ensure_git_repo || return
    local root query=''
    root=$(git rev-parse --show-toplevel)
    [[ $root != "$PWD" ]] && query='!../ '

    (
      git -c color.status=$(__fzf_git_color) status --short --no-branch
      git ls-files "$root" | grep -vxFf <(
        git status -s | grep '^[^?]' | cut -c4-
        echo :
      ) | sed 's/^/   /'
    ) |
      __fzf_cmd__base -m --ansi --nth 2..,.. \
        --border-label 'üìÅ Files' \
        --header $'CTRL-O (open in browser) ‚ï± ALT-E (open in editor)\n\n' \
        --bind "ctrl-o:execute-silent:bash  file {-1}" \
        --bind "alt-e:execute:${EDITOR:-vim} {-1} > /dev/tty" \
        --query "$query" \
        --preview "git diff --no-ext-diff --color=$(__fzf_git_color .) -- {-1} | $(__fzf_git_pager); $(__fzf_git_cat) {-1}" "$@" |
      cut -c4- | sed 's/.* -> //'
  }

  act__tags() {
    __fzf_ensure_git_repo || return
    git tag --sort -version:refname |
      __fzf_cmd__base --preview-window right,70% \
        --border-label 'üìõ Tags' \
        --header $'CTRL-O (open in browser)\n\n' \
        --bind "ctrl-o:execute-silent:bash fzf-helper --open-in-browser tag {}" \
        --preview "git show --color=$(__fzf_git_color .) {} | $(__fzf_git_pager)" "$@"
  }

  # FIX: not working
  act__hashes() {
    __fzf_ensure_git_repo || return
    fzf-helper --get-data hashes |
      __fzf_cmd__base --ansi --no-sort --bind 'ctrl-s:toggle-sort' \
        --border-label 'üç° Hashes' \
        --header-lines 3 \
        --bind "ctrl-o:execute-silent:bash fzf-helper --open-in-browser commit {}" \
        --bind "ctrl-d:execute:grep -o '[a-f0-9]\{7,\}' <<< {} | head -n 1 | xargs git diff --color=$(__fzf_git_color) > /dev/tty" \
        --bind "alt-a:change-border-label(üçá All hashes)+reload:bash fzf-helper --get-data all-hashes" \
        --color hl:underline,hl+:underline \
        --preview "grep -o '[a-f0-9]\{7,\}' <<< {} | head -n 1 | xargs git show --color=$(__fzf_git_color .) | $(__fzf_git_pager)" "$@" |
      awk 'match($0, /[a-f0-9][a-f0-9][a-f0-9][a-f0-9][a-f0-9][a-f0-9][a-f0-9][a-f0-9]*/) { print substr($0, RSTART, RLENGTH) }'
  }

  act__remotes() {
    __fzf_ensure_git_repo || return
    git remote -v | awk '{print $1 "\t" $2}' | uniq |
      __fzf_cmd__base --tac \
        --border-label 'üì° Remotes' \
        --header $'CTRL-O (open in browser)\n\n' \
        --bind "ctrl-o:execute-silent:bash fzf-helper --open-in-browser remote {1}" \
        --preview-window right,70% \
        --preview "git log --oneline --graph --date=short --color=$(__fzf_git_color .) --pretty='format:%C(auto)%cd %h%d %s' '{1}/$(git rev-parse --abbrev-ref HEAD)' --" "$@" |
      cut -d$'\t' -f1
  }

  # FIX: not working
  act__stashes() {
    __fzf_ensure_git_repo || return
    git stash list | __fzf_cmd__base \
      --border-label 'ü•° Stashes' \
      --header $'CTRL-X (drop stash)\n\n' \
      --bind 'ctrl-x:reload(git stash drop -q {1}; git stash list)' \
      -d: --preview "git show --color=$(__fzf_git_color .) {1} | $(__fzf_git_pager)" "$@" |
      cut -d: -f1
  }

  # ref logs (it starts with `l` so that we can use `l` as the keybind.
  act__reflogs() {
    __fzf_ensure_git_repo || return
    git reflog --color=$(__fzf_git_color) --format="%C(blue)%gD %C(yellow)%h%C(auto)%d %gs" | __fzf_cmd__base --ansi \
      --border-label 'üìí Reflogs' \
      --preview "git show --color=$(__fzf_git_color .) {1} | $(__fzf_git_pager)" "$@" |
      awk '{print $1}'
  }

  act__each_ref() {
    __fzf_ensure_git_repo || return
    fzf-helper refs | __fzf_cmd__base --ansi \
      --nth 2,2.. \
      --tiebreak begin \
      --border-label '‚òòÔ∏è  Each ref' \
      --header-lines 2 \
      --preview-window down,border-top,40% \
      --color hl:underline,hl+:underline \
      --no-hscroll \
      --bind 'ctrl-/:change-preview-window(down,70%|hidden|)' \
      --bind "ctrl-o:execute-silent:bash fzf-helper --open-in-browser {1} {2}" \
      --bind "alt-e:execute:${EDITOR:-vim} <(git show {2}) > /dev/tty" \
      --bind "alt-a:change-border-label(üçÄ Every ref)+reload:bash fzf-helper --get-data all-refs" \
      --preview "git log --oneline --graph --date=short --color=$(__fzf_git_color .) --pretty='format:%C(auto)%cd %h%d %s' {2} --" "$@" |
      awk '{print $2}'
  }

  act__worktrees() {
    __fzf_ensure_git_repo || return
    git worktree list | __fzf_cmd__base \
      --border-label 'üå¥ Worktrees' \
      --header $'CTRL-X (remove worktree)\n\n' \
      --bind 'ctrl-x:reload(git worktree remove {1} > /dev/null; git worktree list)' \
      --preview "
      git -c color.status=$(__fzf_git_color .) -C {1} status --short --branch
      echo
      git log --oneline --graph --date=short --color=$(__fzf_git_color .) --pretty='format:%C(auto)%cd %h%d %s' {2} --
    " "$@" |
      awk '{print $1}'
  }

  # =====================================
  # Arguments

  # NOTE: if $# == 1, then i know that it will be calling a func,
  # an if 2 then requesting information.
  # I have to see how I can handle this better and maybe reuse some
  # dorothy commands for #2.

  # process our own arguments, delegate everything else to stdinargs
  local item action=''
  while test "$#" -ne 0; do
    item="$1"
    shift
    case "$item" in
    '--help' | '-h') help ;;
    # ====================================
    # BASE PICKERS
    # These can be used standalone or from binding.
    'branches') action=$item ;;
    'each_ref') action="$item" ;;
    'files') action="$item" ;;
    'hashes') action="$item" ;;
    'reflogs') action="$item" ;;
    'remotes') action="$item" ;;
    'stashes') action="$item" ;;
    'tags') action="$item" ;;
    'worktrees') action="$item" ;;
    # ====================================
    # BIND CALLBACK ACTIONS
    # There are called by the base pickers internally
    --open-in-browser | '-o')
      open_in_browser "$@"
      ;;
    --get-data | '-d')
      get_git_data "$@"
      return
      ;;
    *) help "An unrecognised argument was provided: $item" ;;
    esac
  done

  # Check
  if [[ -z "$action" ]]; then
    help 'No action was provided.'
  fi

  # =====================================
  # Action

  if test "$(type -t "act__$action")" = 'function'; then
    "act__$action"
    return
  else
    echo-style --error="Action [$action] not yet implemented." >/dev/stderr
    return 78 # ENOSYS 78 Function not implemented
  fi
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
  fzf_helper "$@"
fi
