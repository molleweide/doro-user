#!/usr/bin/env bash

# NOTE: playground for learning Ben's convention on how to capture cli args.

function testing_args() (
	source "$DOROTHY/sources/bash.bash"

	# default values
	local item='' items=() capture='' option_timeout='' option_multi='no'

	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in

		'--help' | '-h')
			# basic flag
			help
			;;

		'--capture='*)
			# capture everything after `=`
			capture="${item#*--question=}"
			;;

		'--no-multi'* | '--multi'*)
			# ????
			option_multi="$(get-flag-value multi --missing="$option_multi" -- "$item" | echo-affirmative)"
			;;

		'--')
			# capture items after --
			items+=("$@")
			shift $#
			break
			;;

		'--'*) help "An unrecognised flag was provided: $item" ;;

		*) help "An unrecognised argument was provided: $item" ;;

		esac
	done

	# NOTE: examples to walk through

	# SETUP-UTIL ============================================
	#
	#
	#

	# process
	local item action='install' installer='' app='' cli='' name='' quiet confirm='no' optional='no' fallback='yes' upgrade='no' force='no' order=()
	quiet="$(echo-quiet -- "$@")"
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--install') action='install' ;;
		'--uninstall') action='uninstall' ;;
		'--action='*) action="${item#*--action=}" ;;
		'--order='*) mapfile -t order < <(echo-split ' ' -- "${item#--order=}") ;;
		'--installer='*) installer="${item#--installer=}" ;;
		'--app='*) app="${item#--app=}" ;;
		'--cli='*) cli="${item#--cli=}" ;;
		'--name='*) name="${item#--name=}" ;;
		'--no-quiet'* | '--quiet'* | '--no-verbose'* | '--verbose'*) ;; # handled by echo-quiet
		'--no-confirm'* | '--confirm'*)
			confirm="$(get-flag-value confirm --missing="$confirm" -- "$item" | echo-affirmative)"
			;;
		'--no-optional'* | '--optional'*)
			optional="$(get-flag-value optional --missing="$optional" -- "$item" | echo-affirmative)"
			;;
		'--no-fallback'* | '--fallback'*)
			fallback="$(get-flag-value fallback --missing="$fallback" -- "$item" | echo-affirmative)"
			;;
		'--no-force'* | '--force'*)
			force="$(get-flag-value force --missing="$force" -- "$item" | echo-affirmative)"
			;;
		'--no-upgrade'* | '--upgrade'*)
			upgrade="$(get-flag-value upgrade --missing="$upgrade" -- "$item" | echo-affirmative)"
			;;
		'--')
			if test -z "$installer"; then
				help "--installer=<installer> is required when using -- <...packages>"
			fi
			if test -z "$name"; then
				name="$installer:$*"
			fi
			if test "$#" -eq 0; then
				return 0 # no packages to install
			fi
			while test "$#" -ne 0; do
				if [[ $1 == *"="* ]]; then
					break
				fi
				set -- "$@" "$installer=$1"
				shift
			done
			continue
			;;

			# installer options
		'ALPINE='*) APK+=("${item#*ALPINE=}") ;; # alias for APK
		'APK='*) APK+=("${item#*APK=}") ;;
		'APPIMAGE='*) APPIMAGE+=("${item#*APPIMAGE=}") ;;
		'APT_ID='*) APT_ID="${item#*APT_ID=}" ;;
		'APT_KEY='*) APT_KEY="${item#*APT_KEY=}" ;;
		'APT_REPO='*) APT_REPO="${item#*APT_REPO=}" ;;
		'APT='*) APT+=("${item#*APT=}") ;;
		'ARCH='*) AUR+=("${item#*ARCH=}") ;; # alias for AUR
		'AUR='*) AUR+=("${item#*AUR=}") ;;
		'AURUTILS='*) AURUTILS+=("${item#*AURUTILS=}") ;;
		'BREW_TAP='*) BREW_TAP+=("${item#*BREW_TAP=}") ;;
		'BREW='*) BREW+=("${item#*BREW=}") ;;
		'BSD='*) BSD+=("${item#*BSD=}") ;;
		'CABAL='*) CABAL+=("${item#*CABAL=}") ;;
		'CARGO='*) CARGO+=("${item#*CARGO=}") ;;
		'CASK_TAP='*) CASK_TAP+=("${item#*CASK_TAP=}") ;;
		'CASK='*) CASK+=("${item#*CASK=}") ;;
		'CHOCO='*) CHOCO+=("${item#*CHOCO=}") ;;
		'CHOCOLATEY='*) CHOCOLATEY+=("${item#*CHOCOLATEY=}") ;;
		'CINST='*) CINST+=("${item#*CINST=}") ;;
		'CONDA_CHANNEL='*) CONDA_CHANNEL="${item#*CONDA_CHANNEL=}" ;;
		'CONDA='*) CONDA+=("${item#*CONDA=}") ;;
		'DEB='*) DEB+=("${item#*DEB=}") ;;
		'DEBIAN='*) DEB+=("${item#*DEBIAN=}") ;; # alias for DEB
		'DNF_COPR='*) DNF_COPR+=("${item#*DNF_COPR=}") ;;
		'DNF_GROUP='*) DNF_GROUP+=("${item#*DNF_GROUP=}") ;;
		'DNF_REPO='*) DNF_REPO+=("${item#*DNF_REPO=}") ;;
		'DNF='*) DNF+=("${item#*DNF=}") ;;
		'DOWNLOAD_BEARER_TOKEN='*) DOWNLOAD_BEARER_TOKEN="${item#*DOWNLOAD_BEARER_TOKEN=}" ;;
		'DOWNLOAD_BUILD_EVAL='*) DOWNLOAD_BUILD_EVAL="${item#*DOWNLOAD_BUILD_EVAL=}" ;;
		'DOWNLOAD_BUILD_FILTER='*) DOWNLOAD_BUILD_FILTER="${item#*DOWNLOAD_BUILD_FILTER=}" ;;
		'DOWNLOAD_FILENAME='*) DOWNLOAD_FILENAME="${item#*DOWNLOAD_FILENAME=}" ;;
		'DOWNLOAD_UNZIP_FILTER='*) DOWNLOAD_UNZIP_FILTER="${item#*DOWNLOAD_UNZIP_FILTER=}" ;;
		'DOWNLOAD_UNZIP_FORMAT='*) DOWNLOAD_UNZIP_FORMAT="${item#*DOWNLOAD_UNZIP_FORMAT=}" ;;
		'DOWNLOAD='*) DOWNLOAD="${item#*DOWNLOAD=}" ;;
		'DPKG='*) DPKG+=("${item#*DPKG=}") ;;
		'EMERGE_REPO='*) EMERGE+=("${item#*EMERGE_REPO=}") ;;
		'EMERGE='*) EMERGE+=("${item#*EMERGE=}") ;;
		'EOPKG='*) EOPKG+=("${item#*EOPKG=}") ;;
		'EVAL='*) EVAL+=("${item#*EVAL=}") ;;
		'FEDORA='*) DNF+=("${item#*FEDORA=}") ;; # alias for DNF
		'FLATPAK_REPO='*) FLATPAK_REPO+=("${item#*FLATPAK_REPO=}") ;;
		'FLATPAK='*) FLATPAK+=("${item#*FLATPAK=}") ;;
		'GEM='*) GEM+=("${item#*GEM=}") ;;
		'GENTOO='*) EMERGE+=("${item#*GENTOO=}") ;; # alias for EMERGE
		'GO='*) GO+=("${item#*GO=}") ;;
		'GUIX='*) GUIX+=("${item#*GUIX=}") ;;
		'INSTALLER_FILENAME='*) INSTALLER_FILENAME="${item#*INSTALLER_FILENAME=}" ;;
		'INSTALLER_OPEN='*) INSTALLER_OPEN="${item#*INSTALLER_OPEN=}" ;;
		'INSTALLER='*) INSTALLER="${item#*INSTALLER=}" ;;
		'MACPORTS='*) PORT+=("${item#*MACPORTS=}") ;; # alias for PORT
		'MAGEIA='*) URPMI+=("${item#*MAGEIA=}") ;;    # alias for URPMI
		'MAS='*) MAS+=("${item#*MAS=}") ;;
		'NIX='*) NIX+=("${item#*NIX=}") ;;
		'NODE='*) NODE+=("${item#*NODE=}") ;;
		'NPM='*) NPM+=("${item#*NPM=}") ;;
		'OPENSUSE='*) ZYPPER+=("${item#*OPENSUSE=}") ;; # alias for ZYPPER
		'PACMAN='*) PACMAN+=("${item#*PACMAN=}") ;;
		'PAKKU='*) PAKKU+=("${item#*PAKKU=}") ;;
		'PAMAC='*) PAMAC+=("${item#*PAMAC=}") ;;
		'PARU='*) PARU+=("${item#*PARU=}") ;;
		'PIP='*) PIP+=("${item#*PIP=}") ;;
		'PIPX='*) PIPX+=("${item#*PIPX=}") ;;
		'PKG='*) PKG+=("${item#*PKG=}") ;;
		'PKGADD='*) PKGADD+=("${item#*PKGADD=}") ;;
		'PKGIN='*) PKGIN+=("${item#*PKGIN=}") ;;
		'PORT='*) PORT+=("${item#*PORT=}") ;;
		'PYTHON='*) PYTHON+=("${item#*PYTHON=}") ;;
		'RPM='*) RPM+=("${item#*RPM=}") ;;
		'RUBY='*) RUBY+=("${item#*RUBY=}") ;;
		'RUST='*) RUST+=("${item#*RUST=}") ;;
		'SCOOP='*) SCOOP+=("${item#*SCOOP=}") ;;
		'SNAP_CHANNEL='*) SNAP_CHANNEL="${item#*SNAP_CHANNEL=}" ;;
		'SNAP='*) SNAP+=("${item#*SNAP=}") ;;
		'SOLUS='*) EOPKG+=("${item#*SOLUS=}") ;; # alias for EOPKG
		'SUSE='*) ZYPPER+=("${item#*SUSE=}") ;;  # alias for ZYPPER
		'TEA='*) TEA+=("${item#*TEA=}") ;;
		'UBUNTU='*) APT+=("${item#*UBUNTU=}") ;; # alias for APT
		'URPMI='*) URPMI+=("${item#*URPMI=}") ;;
		'VOID='*) XBPS+=("${item#*VOID=}") ;; # alias for XBPS
		'WINGET='*) WINGET+=("${item#*WINGET=}") ;;
		'XBPS='*) XBPS+=("${item#*XBPS=}") ;;
		'YAY='*) YAY+=("${item#*YAY=}") ;;
		'YUM_REPO='*) YUM_REPO+=("${item#*YUM_REPO=}") ;;
		'YUM='*) YUM+=("${item#*YUM=}") ;;
		'ZYPPER_REPO_ALIAS='*) ZYPPER_REPO_ALIAS="${item#*ZYPPER_REPO_ALIAS=}" ;;
		'ZYPPER_REPO='*) ZYPPER_REPO="${item#*ZYPPER_REPO=}" ;;
		'ZYPPER_TYPE='*) ZYPPER_TYPE="${item#*ZYPPER_TYPE=}" ;;
		'ZYPPER='*) ZYPPER+=("${item#*ZYPPER=}") ;;
		'--'*) ;; # passively ignore, could be custom arg, such as --paths for setup-util-plex
		*) help "An unrecognised flag was provided: $item" ;;
		esac
	done

	# MOUNT-HELPER =================================
	#
	#
	#

	# process
	local item
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;

		'--type='*) item="--${item#*--type=}" ;;&
		'--parse') option_actions+='[parse]' ;;
		'--mount') option_actions+='[mount]' ;;
		'--unmount') option_actions+='[unmount]' ;;
		'--check' | '--mounted') option_actions+='[check]' ;;

		'--no-automount'* | '--automount'*)
			option_automount="$(get-flag-value automount --missing="$option_automount" -- "$item" | echo-affirmative)"
			;;
		'--no-cron'* | '--cron'*)
			option_cron="$(get-flag-value cron --missing="$option_cron" -- "$item" | echo-affirmative)"
			;;
		'--no-fstab'* | '--fstab'*)
			option_fstab="$(get-flag-value fstab --missing="$option_fstab" -- "$item" | echo-affirmative)"
			;;
		'--no-remount'* | '--remount'*)
			option_remount="$(get-flag-value remount --missing="$option_remount" -- "$item" | echo-affirmative)"
			;;

		'--type='*) option_type="${item#*--type=}" ;;
		'--samba' | '--smb' | '--smbfs' | '--cifs') option_type='samba' ;;
		'--gocryptfs' | '--fuse.gocryptfs') option_type='gocryptfs' ;;
		'--btrfs') option_type='btrfs' ;;

		'--user='*) option_user="${item#*--user=}" ;;
		'--group='*) option_group="${item#*--group=}" ;;
		'--owner='*) option_owner="${item#*--owner=}" ;;
		'--no-own'* | '--own'*)
			option_own="$(get-flag-value own --missing="$option_own" -- "$item" | echo-affirmative)"
			;;

		'--username='*) option_username="${item#*--username=}" ;;
		'--password='*) option_password="${item#*--password=}" ;;
		'--server='*) option_server="${item#*--server=}" ;;

		'--label='*) option_label="${item#*--label=}" ;;
		'--count='*) option_count="${item#*--count=}" ;;

		'--share='*) option_share="${item#*--share=}" ;;
		'--source='*) option_source="${item#*--source=}" ;;
		'--target='*) option_target="${item#*--target=}" ;;
		'--')
			# act on prior group
			action
			reset
			;;
		*) help "An unrecognised argument was provided: $item" ;;
		esac
	done

)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	testing_args "$@"
fi
