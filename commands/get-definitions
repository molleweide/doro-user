#! /usr/bin/env bash

# https://stackoverflow.com/questions/42420717/print-out-a-list-of-all-cases-of-a-switch
# https://stackoverflow.com/questions/4471364/how-do-i-list-the-functions-defined-in-my-shell

# NOTE: declare lists all func defs in sourced files as well, ie. we need to
# ensure that we only get func defs from the current file.
# See: https://superuser.com/questions/1111219/can-i-get-all-functions-in-a-script-file-using-bash
# Basically we make a custom call to this file itself with env -i so that we
# can parse the file exclusively.
# ...
# Hmmm, now that I think about it. We could just run echo-regexp on the file
# itself and check for all the func names which would be the easiest solution.
# ...
# TODO: Create command `get-definitions`
# So there are three cases.
# 1. [ ] Get all existing func defs -> declare -f
# 2. [ ] Get all existing func defs in current file, including dynamically
#    created ones -> custom solution.
# 3. [*] Only get explicitly defined func defs -> use echo-regexp on self.

# FIX: Support
# [ ] sed
# [ ] standard grep
# [ ] ripgrep

# declare -f a_function_which_failure_IS_NOT_the_last_command
# declare -f

function get_definitions() (
	source "$DOROTHY/sources/bash.bash"

	# NOTE: options
	#
	# --globally:
	#
	# --executing-cmd:
	#
	# --dorothy-cmd-top-level: Funcs inside a dorothy command are indented by one
	#             so this could be checked for in order to avoid/filter out unwanted
	#             func defs.

	# func_defs=$(declare -f)
	# printf '%s\n' "${func_defs[@]}" | echo-regexp -g -m -o -n --search='^([\w\_]+)\(\)'
	# echo-lines "${func_defs[@]}" | echo-regexp -g -m -o -n --search='^([\w\_]+)\(\)'

	# TODO: arguments

	local exec_path="$1" # "${BASH_SOURCE[0]}"

	# __print_lines "exec path in get def: $exec_path"

	# TODO: since ripgrep is the fastest use it to find the func names.
	# if command-exits rg; then
	# elif command-exists grep; then
	# elif command-exists sed; then
	# else
	# fi

	local supports_named_captures='no'

	# JS regexp cheat sheet: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Groups_and_backreferences

	local fn_pat1="^\s*function\s+([\w_]+)(\(\))?\s*\{" # captures: `function <name>()? {`
	local fn_pat2="^\s*([\w_]+)\(\)\s*\{"               # captures: `<name>() {`

	local fn_regex=''
	if [[ "$supports_named_captures" == "yes" ]]; then
		fn_regex="$fn_pat1|$fn_pat2"
	else
		fn_regex="$fn_pat1"
	fi

	# local gpt="function\s+(\w+)\s*\{|(\w+)\s*\(\)\s*\{"

	echo-file --raw -- "$exec_path" | echo-regexp -gmon --search="$fn_regex" --replace='$1'

)

# Fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	get_definitions "$@"
fi
