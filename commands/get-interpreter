#!/usr/bin/env bash

function get_interpreter() (
  source "$DOROTHY/sources/bash.bash"

  # --only shell name
  #
  # --full shebang
  #
  # --bin bin path

  local common_shebangs=(
    /bin/bash
    /bin/sh
    /bin/zsh
    /bin/dash

    /usr/bin/env bash
    /usr/bin/env sh
    /usr/bin/env zsh

    /usr/bin/env python
    /usr/bin/env python3
    /usr/bin/env python2

    /usr/bin/env perl
    /usr/bin/env ruby
    /usr/bin/env php
    /usr/bin/env node
    /usr/bin/env tclsh
    /usr/bin/env awk
    /usr/bin/env expect

    /usr/bin/env lua
    /usr/bin/env fish
    /usr/bin/env Rscript

    /bin/csh
    /bin/tcsh
  )

  function help {
    cat <<-EOF >/dev/stderr
			ABOUT:
			Evaluate the interpreter of a script file.

			If file has an extension, then only the extension will/can be returned.
		EOF
    if [[ $# -ne 0 ]]; then
      echo-error "$@"
    fi
    return 22 # EINVAL 22 Invalid argument
  }

  # local option_args=()
  local target_file='' get_name='' get_shebang='' get_bin='' get_cmd=''
  while [[ $# -ne 0 ]]; do
    item="$1"
    shift
    case "$item" in
    '--help' | '-h') help ;;
    '--name') get_name='yes' ;;
    '--shebang') get_shebang='yes' ;;
    '--bin') get_bin='yes' ;;
    '--cmd') get_cmd='yes' ;;
    '--')
      if [[ -n "$1" ]]; then
        target_file=$1
      else
        help "You must provide a file"
      fi
      break
      ;;
      # *) option_args+=("$item") ;;
    *) help "An unrecognized argument was provided" ;;
    esac
  done

  local lang='' ext='' shebang=''

  ext="${target_file##*.}"

  if [[ -n "$ext" ]]; then
    # if there is an extension you will only get the ext returned..
    echo "$ext"
  else
    shebang="$(head -n 1 "$target_file")"
    if [[ "$shebang" == "#!"* ]]; then
      if [[ "$get_name" = 'yes' ]]; then
        echo "${shebang#\#!}"
      elif [[ "$get_shebang" = 'yes' ]]; then
        echo "${shebang#\#!}"
      elif [[ "$get_bin" = 'yes' ]]; then
        echo "${shebang#\#!}"
      elif [[ "$get_cmd" = 'yes' ]]; then
        echo "${shebang#\#!}"
      fi
    else
      echo "could not evaluate language from: $target_file" >/dev/tty
      return 1
    fi
  fi
)

# fire if invoked standalone
if [[ $0 == "${BASH_SOURCE[0]}" ]]; then
  if [[ $* == '--test' ]]; then
    get_interpreter_test
  else
    get_interpreter "$@"
  fi
fi
