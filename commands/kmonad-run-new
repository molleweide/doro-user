#!/usr/bin/env bash

# @todo
#   - use $KMO_LAYOUT_DIR > if exists, else check in config/kmonad
#   - add dorothy help file.
#   - dorothy flags while

# # ensure valid layout path
# action="$(
# 	choose-option --required \
# 		--question='which action to perform?' \
# 		--filter="$action" -- "${actions[@]}"
# )"

function kmonad_run() {
	# index a string in bash
	# https://unix.stackexchange.com/questions/303960/index-a-string-in-bash

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Utility for running a kmonad. Requires that you have an existing config.

			install

			cat

			dry-run

			run

			write

			USAGE:
			echo-clear-line
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# TODO: how should i handle arguments.
	#
	# kmo -c
	#     select hw and print
	#
	# kmo -c -d
	#     select hw, print, and dry run
	#
	# kmo -c -- <path>
	#     print layout at path
	#
	# kmo -c -r
	#     select layout print and run
	#
	# kmo -c -r -- <path>
	#   print and run layout at path

	# Process action arguments
	local item action='' option_branch='' option_commit='' args=()
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'-d' | '--dry-run') action='dry_run' ;;
		'-c' | '--cat') action='cat' ;;
		'-w' | '--write') action='write' ;;
		'-r' | '--run') action='run' ;;
		# custom config path
		#
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*) help "An unrecognised argument was provided: $item" ;;
		esac
	done

	if test -z "$action"; then
		help "<action> must be provided."
	fi

	# TODO: default as dry-run

	function install() {
		# choose if you want to build or install from pkg
		# can only build on macos
		:
	}

	# Paths
	config_kmonad_dir="$XDG_CONFIG_HOME/kmonad"
	bin_dir="$HOME/.local/bin"

	# Find executables
	function get_executable() {
		:
	}
	local KMO_EXECUTABLE
	if is-mac; then
		# NOTE: if doesn't exist need to build on mac
		bin_exec_paths=($(find $bin_dir | grep "kmonad"))
		KMO_EXECUTABLE="$(choose-option --confirm --question='Select executable name.' -- "${bin_exec_paths[@]}")"
	else
		# NOTE: check kmonad exists continue else install via setup-util
		:
	fi

	# Select which hardware to run on
	function get_select_hardware() {
		:
	}
	user_hardwares_list=(
		"ergo"
		"pro"
		"air"
	)
	SELECTED_HARDWARE="$(choose-option --confirm --question='Select hardware to run kmonad for.' -- "${user_hardwares_list[@]}")"

	# Create kmonad `cfg` block
	function get_cfg_block() {
		:
	}
	declare -A defcfg_input_str=(
		[ergo]="Ergodox EZ"
		[pro]="Apple Internal Keyboard / Trackpad"
		[air]="Apple Internal Keyboard / Trackpad"
	)
	input="${defcfg_input_str[$SELECTED_HARDWARE]}"
	output="kext"
	fallthrough=false
	DEFCFG="(defcfg
    input (iokit-name \"$input\")
    output ($output)
    fallthrough $fallthrough
  )"

	# Get source keymap file
	function get_src_file_for_hardware() {
		:
	}
	declare -A defsrc_files=(
		[ergo]="defsrc_ergodox.kbd"
		[pro]="defsrc_mbpro_swe.kbd"
		[air]="defsrc_mbair.kbd"
	)
	DEFSRC="$config_kmonad_dir/defsrc/${defsrc_files[$SELECTED_HARDWARE]}"

	# Create final layout
	function compile_layout() {
		echo "$DEFCFG"
		cat "$DEFSRC"
		# Load each layer file
		for f in "$config_kmonad_dir/common/"*.kbd; do
			local filename
			filename="$(basename "$f")"
			# FIX: rewrite this as a `continue` statement
			# I wanted literal match here because layers ending with `~.kbd` are ignored
			# Do this instead with a [if match xyz then continue..]
			if [[ ! $filename =~ "~.kbd" ]]; then
				cat "$f"
			fi
		done
	}

	# Compile layout into tmpfile
	layout_temp_file="$(mktemp /tmp/kmonad-XXX)"
	compile_layout >"$layout_temp_file"

	function print_layout() {
		local title="Printed kmonad layout"
		echo-segment --h2="$title"
		cat "$layout_temp_file"
		echo-segment --g2="$title"
	}

	function run() {
		echo-style --bold="Running kmonad now..."
		sudo "$KMO_EXECUTABLE" "$layout_temp_file" --allow-cmd
	}

	function write_layout_to_file() {
		:
	}

	# Arguments
	mode="d" # run

	for arg in "$@"; do
		if test "$arg" = '--cat' -o "$arg" = '-c'; then
			mode="c"
		elif test "$arg" = '--write' -o "$arg" = '-w'; then
			mode="w" # TODO
		elif test "$arg" = '--run' -o "$arg" = '-r'; then
			mode="r"
		fi
	done

	# Run kmonad
	if test "$mode" = "r"; then
		run

	elif test "$mode" = 'c'; then
		print_layout

	elif test "$mode" = 'w'; then
		echo "write layout -> todo..."

	elif test "$mode" = 'd'; then
		$KMO_EXECUTABLE "$layout_temp_file" -d
	fi

}

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	kmonad_run "$@"
fi
