#!/usr/bin/env bash

echo-style --g1="SETUP REAPER"

# https://forum.cockos.com/showthread.php?p=2487247#post2487247
# https://forum.cockos.com/showthread.php?t=242922&highlight=reaper+update+utility
# https://github.com/iliaspoulakis/Reaper-Tools/blob/master/Various/REAPER%20Update%20Utility.lua
# - cli > write log file to $REAPER_APP_DIR/rpp.log
# - look at reaper update utility.
#   can this one be used / compatible with branches

# TODO: REVIEW DOROTHY INSTALLER SCRIPT FOR REAPER.
#   ~ symlink packages into UserPlugins and Scripts

# export REAPER_CLI=$REAPER_APP_DIR/reaper-latest
# export PATH="$PATH:$REAPER_APP_DIR"
export REAPER_DIR=$HOME/reaper
export REAPER_APP_DIR=$REAPER_DIR/app

REAPER_PACKAGES_DIR="$REAPER_DIR/packages"
REAPER_PROJECTS_DIR="$REAPER_DIR/projects"
REAPER_TMP_DIR="$REAPER_DIR/tmp"
REAPER_BACKUP_DIR="$REAPER_DIR/backup"

mkdir -p "$REAPER_APP_DIR"
mkdir -p "$REAPER_PACKAGES_DIR"
mkdir -p "$REAPER_PROJECTS_DIR"
mkdir -p "$REAPER_TMP_DIR"
mkdir -p "$REAPER_BACKUP_DIR"

export GIT_DEFAULT_BRANCH="molleweide" # rm...

github_user=$(git config github.user)

# if no first positional parameter then default to app/reaper
INSTALL_PATH="$REAPER_APP_DIR/${1-reaper}"

app_name="${1-reaper}.app"

checkout_default_branch() {
	echo "todo"
}

install_reaper_default() {
	if confirm --bool --ppid=$$ -- "Do you want to install Reaper with default configs to /Applications?"; then
		echo-style --g2="Installing..."
		if is-mac; then
			brew install --cask reaper
			# TODO: test this
			# mv "/Applications/REAPER.app" "/Applications/REAPER_DEFAULT.app"
		fi
	fi
}

install_reaper_custom() {
	if test -d "$INSTALL_PATH"; then
		echo-style --g3="Reaper already exists at '$INSTALL_PATH'.
                \ You can install a new instance by 'setup-util-reaper <name>'."
	else
		if confirm --bool --ppid=$$ -- "Do you want to install Reaper to [$INSTALL_PATH]?"; then
			echo-style --green="Installing Reaper with custom config to $INSTALL_PATH"

			set -x
			if test -n "$github_user"; then
				reaperConfig="git@github.com:$github_user/reaper-config.git"
				if ! confirm --bool --ppid=$$ -- "Does this repository house your Reaper configuration? [$reaperConfig]"; then
					reaperConfig=''
				fi
			fi

			echo-style --purple="Cloning the Reaper configuration into $INSTALL_PATH"
			if ! git clone "$reaperConfig" "$INSTALL_PATH"; then
				echo-style --orange="The clone of the repository [$reaperConfig] to [$INSTALL_PATH] failed. \
				    Setting up a clean install with git init."
				pushd "$INSTALL_PATH" >/dev/null || exit 1
				silent git init
				popd >/dev/null || exit 1
			else
				echo-style --magenta="checkout branch ($GIT_DEFAULT_BRANCH)!!"
				pushd "$INSTALL_PATH" >/dev/null 2>&1
				git checkout $GIT_DEFAULT_BRANCH
				# TODO: move away from using submodules.
				#   >>> instead put all packages under `reaper/packages` and symlink
				git submodule update --init --recursive
				# cd Scripts/reaper-keys && git checkout molleweide && cd ../..
				# cd Effects/molleweide && git checkout molleweide && cd ../..
				# cd ColorThemes && git checkout molleweide && cd ..
				popd >/dev/null 2>&1
			fi

			echo-style --g2="Downloading the reaper executable."
			brew install --cask reaper --appdir="$INSTALL_PATH" --force
			$(mv "$INSTALL_PATH/REAPER.app" "$INSTALL_PATH/$app_name")
		fi

		exit 1
		# TODO: install packages has to be done first since symlinking depends
		# on their existence

		# symlink-helper --existing="arst" --symlink="arst"

		# TODO: symlink packages
	fi
}

# TODO: rework dorothy `unziptar` into `open-and-get-stuff`
#   look into dorothy:
#     down
#     setup-util download strategy
#   setup-util -> down -> unziptar
#

# NOTE: OLD MODULES FILE
# [submodule "Scripts/reaper-auto-syntax"]
# 	path = Scripts/reaper-auto-syntax
# 	url = git@github.com:molleweide/reaper-auto-syntax
# [submodule "ColorThemes"]
# 	path = ColorThemes
# 	url = git@github.com:molleweide/ColorThemes

install_packages() {
	echo-style --g3="Checking if any 3rd party packages need be installed to $REAPER_DIR/packages"
	arch="$(get-arch)"

	if ! test -d "$REAPER_PACKAGES_DIR/reaper-keys"; then
		echo-style --g3="Installing [reaper-keys] to $REAPER_PACKAGES_DIR"
		git clone git@github.com:molleweide/reaper-keys.git "$REAPER_PACKAGES_DIR/reaper-keys"
	fi

	if ! test -d "$REAPER_PACKAGES_DIR/reaper-fuzzy"; then
		echo-style --g3="Installing [fast fx finder] to $REAPER_PACKAGES_DIR"
		# https://forums.cockos.com/showthread.php?t=229807
		git clone git@github.com:molleweide/reaper-fuzzy.git "$REAPER_PACKAGES_DIR/reaper-fuzzy"
	fi

	if ! test -d "$REAPER_PACKAGES_DIR/reaper-jsfx"; then
		echo-style --g3="Installing [reaper-jsfx] to $REAPER_PACKAGES_DIR"
		git clone git@github.com:molleweide/reaper-jsfx.git "$REAPER_PACKAGES_DIR/reaper-jsfx"
	fi

  # TODO: can I find the latest version number somehow
	if ! find "$REAPER_PACKAGES_DIR" -type f -name "*sws*.dylib" -print -quit | grep -q .; then
		echo-style --g3="Installing [SWS] to $REAPER_PACKAGES_DIR"
		local sws_url="https://www.sws-extension.org/download/featured/"
		local sws_pgk_name
		local sws_dylib
		if is-mac; then
			if test "$arch" = 'a64'; then
				sws_pgk_name="sws-2.12.1.3-Darwin-arm64.dmg"
			elif test "$arch" = 'x64'; then
				sws_pgk_name="sws-2.12.1.3-Darwin-x86_64.dmg"
			fi
			tempd=$(mktemp -d)
			down --directory="$tempd" "$sws_url/$sws_pgk_name"
			listing=$(sudo hdiutil attach "$tempd/$sws_pgk_name" | grep "Volumes/$(fs-filename $sws_pgk_name)")
			volume=$(echo "$listing" | cut -f 3)
			sws_dylib=$(find "$volume" -name "reaper*.dylib" -maxdepth 1 -print -quit)
			cp -RLf "$sws_dylib" "$REAPER_PACKAGES_DIR"
			sudo hdiutil detach "$volume" #"$(echo "$listing" | cut -f 1)"
			rm -rf "$tempd"
			xattr -d com.apple.quarantine "$REAPER_PACKAGES_DIR/$(basename "$sws_dylib")"
		fi
		if is-linux; then
			if test "$arch" = 'a64'; then
				sws_pgk_name="sws-2.12.1.3-Linux-aarch64.tar.xz"
			elif test "$arch" = 'a32'; then
				sws_pgk_name="sws-2.12.1.3-Linux-armv7l.tar.xz"
			elif test "$arch" = 'x64'; then
				sws_pgk_name="sws-2.12.1.3-Linux-x86_64.tar.xz"
			elif test "$arch" = 'x32'; then
				sws_pgk_name="sws-2.12.1.3-Linux-i686.tar.xz"
			fi
			# TODO: dorothy unziptar
			# tempd=$(mktemp -d)
			# curl "$sws_url/$sws_pgk_name" >"$tempd/$sws_pgk_name"
			# tar -xf "$sws_pgk_name" -C $REAPER_PACKAGES_DIR
			# rm -rf "$tempd"
		fi
		if is-wsl; then
			echo "windows"
			# sws-2.12.1.3-Windows-x86.exe
			# sws-2.12.1.3-Windows-x64.exe
		fi
	fi

}

install_packages
install_reaper_default
install_reaper_custom
