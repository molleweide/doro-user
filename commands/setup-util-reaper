#!/usr/bin/env bash

echo-style --g1="SETUP REAPER"

# https://forum.cockos.com/showthread.php?p=2487247#post2487247
# https://forum.cockos.com/showthread.php?t=242922&highlight=reaper+update+utility
# https://github.com/iliaspoulakis/Reaper-Tools/blob/master/Various/REAPER%20Update%20Utility.lua
# - cli > write log file to $REAPER_APP_DIR/rpp.log
# - look at reaper update utility.
#   can this one be used / compatible with branches

# TODO: REVIEW DOROTHY INSTALLER SCRIPT FOR REAPER.
#   ~ ensure the ~/reaper dir structure is setup correctly
#   ~
#   ~ include alternative to install default reaper installetion in same app dir
#   ~
#   ~ install reaper-keys && SWS to ~/reaper/packages/reaper-keys && symlink
#   ~   how does dorothy install dmg files??

# export REAPER_CLI=$REAPER_APP_DIR/reaper-latest
# export PATH="$PATH:$REAPER_APP_DIR"
export REAPER_DIR=$HOME/reaper
export REAPER_APP_DIR=$REAPER_DIR/app

REAPER_PACKAGES_DIR="$REAPER_DIR/packages"
REAPER_PROJECTS_DIR="$REAPER_DIR/projects"
REAPER_TMP_DIR="$REAPER_DIR/tmp"
REAPER_BACKUP_DIR="$REAPER_DIR/backup"

# this is where app installations are kept
mkdir -p "$REAPER_APP_DIR"

# this is where third party packages are installed, eg reaper-key and SWS
mkdir -p "$REAPER_PACKAGES_DIR"

# this is where user projects are located
mkdir -p "$REAPER_PROJECTS_DIR"

mkdir -p "$REAPER_TMP_DIR"

mkdir -p "$REAPER_BACKUP_DIR"

export GIT_DEFAULT_BRANCH="molleweide" # rm...

github_user=$(git config github.user)

# if no first positional parameter then default to app/reaper
install_path="$REAPER_APP_DIR/${1-reaper}"

# prepare custom name for app file
app_name="${1-reaper}.app"

checkout_default_branch() {
	echo "todo"
}

# TODO: First, do you want to install a default version of reaper to /Applications/

install_reaper_default() {
	if confirm --bool --ppid=$$ -- "Do you want to install Reaper with default configs to /Applications?"; then
		echo-style --g2="Installing..."
		# brew install --cask reaper --appdir="$install_path" --force
		# $(mv "$install_path/REAPER.app" "$install_path/$app_name")
	fi
}

install_reaper_custom() {
	# prompt user for install or exit
	if test -d "$install_path"; then
		echo-style --g3="Reaper already exists at '$install_path'.
                \ You can install a new instance by 'setup-util-reaper <name>'."
		exit 1
	else
		if confirm --bool --ppid=$$ -- "Do you want to install Reaper to [$install_path]?"; then
			#     install-reaper
			echo-style --green="Installing Reaper with custom config to $install_path"
			# else
		fi

		install_packages

		# TODO: symlink packages
	fi
}

# TODO: rework dorothy `unziptar` into `open-and-get-stuff`
#   look into dorothy:
#     down
#     setup-util download strategy
#   setup-util -> down -> unziptar

install_packages() {
	echo-style --g3="Install third party packages to $REAPER_DIR/packages"
	arch="$(get-arch)"

  # reaper keys
	echo-style --g3="Installing [reaper-keys] to $REAPER_PACKAGES_DIR"
	set -x
	git clone git@github.com:molleweide/reaper-keys.git "$REAPER_PACKAGES_DIR/reaper-keys"
	set +x

  # sws
	local sws_url="https://www.sws-extension.org/download/featured/"
	local sws_pgk_name
	local sws_dylib

	if is-mac; then
		if test "$arch" = 'a64'; then
			sws_pgk_name="sws-2.12.1.3-Darwin-arm64.dmg"
		elif test "$arch" = 'x64'; then
			sws_pgk_name="sws-2.12.1.3-Darwin-x86_64.dmg"
		fi

		echo-style --g3="Installing SWS [$sws_pgk_name] to $REAPER_PACKAGES_DIR"

		set -x
		tempd=$(mktemp -d)
		down --directory="$tempd" "$sws_url/$sws_pgk_name"
		listing=$(sudo hdiutil attach "$tempd/$sws_pgk_name" | grep "Volumes/$(fs-filename $sws_pgk_name)")
		volume=$(echo "$listing" | cut -f 3)
		sws_dylib=$(find "$volume" -name "reaper*.dylib" -maxdepth 1 -print -quit)
		cp -RLf "$sws_dylib" "$REAPER_PACKAGES_DIR"
		sudo hdiutil detach "$volume" #"$(echo "$listing" | cut -f 1)"
		rm -rf "$tempd"
		xattr -d com.apple.quarantine "$REAPER_PACKAGES_DIR/$(basename "$sws_dylib")"
		set +x
	fi

	if is-linux; then
		if test "$arch" = 'a64'; then
			sws_pgk_name="sws-2.12.1.3-Linux-aarch64.tar.xz"
		elif test "$arch" = 'a32'; then
			sws_pgk_name="sws-2.12.1.3-Linux-armv7l.tar.xz"
		elif test "$arch" = 'x64'; then
			sws_pgk_name="sws-2.12.1.3-Linux-x86_64.tar.xz"
		elif test "$arch" = 'x32'; then
			sws_pgk_name="sws-2.12.1.3-Linux-i686.tar.xz"
		fi

		echo-style --g3="Installing SWS [$sws_pgk_name] to $REAPER_PACKAGES_DIR"

		# TODO: dorothy unziptar

		# tempd=$(mktemp -d)
		# curl "$sws_url/$sws_pgk_name" >"$tempd/$sws_pgk_name"
		# tar -xf "$sws_pgk_name" -C $REAPER_PACKAGES_DIR
		# rm -rf "$tempd"
	fi

	if is-wsl; then
		echo "windows"
		# sws-2.12.1.3-Windows-x86.exe
		# sws-2.12.1.3-Windows-x64.exe
	fi
}

install_reaper_default
install_reaper_custom

exit 1

if ! test -d "$install_path"; then

	echo-style --green="Installing latest version of Reaper to $install_path"

	if test -n "$github_user"; then
		reaperConfig="git@github.com:$github_user/reaper-config.git"
		if ! confirm-bool --ppid=$$ -- "Does this repository house your Reaper configuration? [$reaperConfig]"; then
			reaperConfig=''
		fi
	fi

	echo-style --purple="Cloning the Reaper configuration into $install_path"

	if ! git clone "$reaperConfig" "$install_path"; then
		echo-style --orange="The clone of the repository [$reaperConfig] to [$install_path] failed."
		pushd "$install_path" >/dev/null || exit 1
		silent git init
		popd >/dev/null || exit 1

	else
		echo-style --magenta="checkout branch ($GIT_DEFAULT_BRANCH)!!"

		pushd "$install_path" >/dev/null 2>&1
		git checkout $GIT_DEFAULT_BRANCH

		# TODO: move away from using submodules.
		#   >>> instead put all packages under `reaper/packages` and symlink

		git submodule update --init --recursive
		# cd Scripts/reaper-keys && git checkout molleweide && cd ../..
		# cd Effects/molleweide && git checkout molleweide && cd ../..
		# cd ColorThemes && git checkout molleweide && cd ..
		popd >/dev/null 2>&1
	fi

	echo-style --g2="Downloading the reaper executable."
	brew install --cask reaper --appdir="$install_path" --force
	$(mv "$install_path/REAPER.app" "$install_path/$app_name")
fi
