#!/usr/bin/env bash

echo-header "SETTING UP DAW REAPER.."

read -r -p "Do you want to install portable Cockos Reaper to $REAPER_DIR/app? [y|N] " response

[[ $response =~ (y|yes|Y) ]] || exit 1

REAPER_DIR=~/reaper

rppv=$(brew info reaper | head -n 1) # get first line of brew command

# match two first numbers in version, and optional last patch number.
if [[ $rppv =~ [0-9]+\.[0-9]+\.?[0-9]? ]]; then
    rpp_latest_string=${BASH_REMATCH[0]}
    echo "Latest reaper version: $rpp_latest_string"
else
    echo-color "Something is wrong with checking reaper version. Aborting..." >&2
    exit 1
fi

RPP_LATEST_DIR=$REAPER_DIR/app/rpp-latest

[ -d $RPP_LATEST_DIR ] && echo-red ">>> Reaper is already installed to `$RPP_LATEST_DIR`." && exit 1

read -r -p "Are you sure you want to proceed with installing reaper to $RPP_LATEST_DIR? [y|N] " response

[[ $response =~ (y|yes|Y) ]] || exit 1

########################################################################
########################################################################

echo-green "Installing latest version to $RPP_LATEST_DIR"

export PATH="$PATH:$RPP_LATEST_DIR"

# mkdir -p $REAPER_DIR/app
# mkdir -p $REAPER_DIR/projects
# mkdir -p $REAPER_DIR/tmp
# mkdir -p $REAPER_DIR/backup

# original="REAPER64.app"
# tmp_dir=$(mkdtemp $REAPER_DIR)

# # INSTALL REAPER TO TARGET DIR AND RENAME TO LATEST VERSION
# mkdir -p $RPP_LATEST_DIR
# brew install --cask reaper --appdir=$RPP_LATEST_DIR --force
# $(mv $RPP_LATEST_DIR/$original "$RPP_LATEST_DIR/rpp-latest.app")

# # CLONE GIT TO TMP DIR AND MOVE IT TO REAPER
# git clone https://github.com/molleweide/reaper-app-config.git $tmp_dir
# mv $tmp_dir/.git $RPP_LATEST_DIR/.git
# rm -r $tmp_dir # be careful

# # get reaper version numbers
# major=$(echo $rpp_latest_string | cut -c8-8)
# minor=$(echo $rpp_latest_string | cut -c10-11)
# patch=$(echo $rpp_latest_string | cut -c13-14)

# # NAVIGATE TO (pushd/popd) REAPER INSTALL DIR AND RESTORE GIT
# pushd $RPP_LATEST_DIR > /dev/null 2>&1

# git checkout rpp-latest
# git reset --hard HEAD

# git submodule update --init --recursive

# # submodule branches
# cd Scripts/reaper-keys && git checkout molleweide && cd ../..
# cd Effects/molleweide && git checkout molleweide && cd ../..
# cd ColorThemes && git checkout molleweide && cd ..

# popd > /dev/null 2>&1


############################################################################
############################################################################
############################################################################
############################################################################
############################################################################
############################################################################
############################################################################

# # check remote version branch names
# latest_exist=$(git ls-remote --heads git@github.com:molleweide/reaper-app-config.git $latest_branch_name)

# if [[ $latest_exist == *"$latest_branch_name"* ]]; then
    # echo-color "latest version repo exists"

# else
#     for ((i = 1 ; i < 6 ; i++)); do
#         most_recent="v$major.$(($minor-$i)).$patch"
#         most_recent_exists=$(git ls-remote --heads git@github.com:molleweide/reaper-app-config.git $most_recent)
#         if [[ $most_recent_exists == *"$most_recent"* ]]; then
#             break
#         fi
#     done
#     dotsay "Most recent existing version: $most_recent"
#     git checkout $most_recent
#     git reset --hard HEAD
#     git checkout -b $latest_branch_name
#     # git push
# fi
