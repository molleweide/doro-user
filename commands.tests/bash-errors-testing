#!/usr/bin/env bash

# TODO: [ ] choose -> select run all tests
#       [ ] If possible, try to re run the choose menu after having run the
#       select function so that user can continuously select and run funcs
#       multiple times
#       [ ] bash.bash -> enable/disable dorothy opts

# NOTE: instruct user to reset shell opts for test-case functions.
# -> This should allow us to use dorothy to setup the test UX but also
# manually setup the environment for each test case and have best of both
# worlds. IE. reset shopts inside of each test case func.

# NOTE: [ ] custom choose-test-current-file
#           [ ] Use a custom flag that sets how many preview lines of each
#           function that we want to allow for output in the terminal.
#           Or maybe this could be done dynamically inside of the command
#           by reusing Ben's custom commands for getting terminal dimensions
#           etc.
#           --
#           Name ideas:
#           choose-function-runner, choose-fn-tester, choose-tester,
#           func-runner-ui
#           --
#           >> run this command in a command where you keep various func
#           test cases that you want to run by selecting them via choose.

# =======================================================
# ERREXIT

# -e      Exit immediately if a pipeline (which may consist of a single simple command), a list,
#         or a compound command (see SHELL GRAMMAR above), exits with a non-zero status.  The
#         shell does not exit if the command that fails is part of the command list immediately
#         following a while or until keyword, part of the test following the if or elif reserved
#         words, part of any command executed in a && or || list except the command following the
#         final && or ||, any command in a pipeline but the last, or if the command's return
#         value is being inverted with !.  If a compound command other than a subshell returns a
#         non-zero status because a command failed while -e was being ignored, the shell does not
#         exit.  A trap on ERR, if set, is executed before the shell exits.  This option applies
#         to the shell environment and each subshell environment separately (see COMMAND
#         EXECUTION ENVIRONMENT above), and may cause subshells to exit before executing all the
#         commands in the subshell.
#
#         If a compound command or shell function executes in a context where -e is being
#         ignored, none of the commands executed within the compound command or function body
#         will be affected by the -e setting, even if -e is set and a command returns a failure
#         status.  If a compound command or shell function sets -e while executing in a context
#         where -e is ignored, that setting will not have any effect until the compound command
#         or the command containing the function call completes.

function bash_error_testing() (
	source "$DOROTHY/sources/bash.bash"
	__require_array 'mapfile'

	# =======================================================
	# SETUP

	# Our standard failure functions, these will be used by our examples
	function _a_function_which_failure_IS_NOT_the_last_command {
		printf '%s\n' 'before failure'
		false # emit an error to this function, as this returns a non-zero exit status
		printf '%s\n' 'after failure'
	}

	function _a_function_which_failure_IS_the_last_command {
		printf '%s\n' 'before failure without after'
		false # emit an error to this function, as this returns a non-zero exit status
	}

	# =======================================================
	# TEST CASES

	function disable_err_which_outputs_before_and_after_failure {
		set +e # disable errors returning immediately, the default bash mode, desirable for the login shell
		_a_function_which_failure_IS_NOT_the_last_command
		# outputs:
		# before failure
		# after failure
	}

	function enable_default_errs_to_return_immediately_before_failure {
		set -e # enable errors to return immediately, the default bash mode in dorothy enabled when we `source "$DOROTHY/sources/bash.bash"`, desirable for scripting
		_a_function_which_failure_IS_NOT_the_last_command
		# outputs:
		# before failure
	}

	function output_before_and_after_fail__description {
		cat <<-EOF
			# SPECIAL: output before and after
			# With **ERREXIT** enabled
		EOF
	}
	function output_before_and_after_fail {
		set -e
		! _a_function_which_failure_IS_NOT_the_last_command
		printf '%s\n' 'failure'
		# outputs:
		# before failure
		# after failure
	}
	function output_both_and_success {
		set -e
		_a_function_which_failure_IS_NOT_the_last_command && printf '%s\n' 'success'
		# outputs:
		# before failure
		# after failure
		# success
	}
	function before_fail_and_after_fail {
		set -e
		_a_function_which_failure_IS_NOT_the_last_command || printf '%s\n' 'failure'
		# outputs:
		# before failure
		# after failure
	}
	function failure_in_conditional {
		set -e
		if _a_function_which_failure_IS_NOT_the_last_command; then
			printf '%s\n' 'success'
		else
			printf '%s\n' 'failure'
		fi
		# outputs:
		# before failure
		# after failure
		# success
	}
	function negated_conditional_success {
		set -e
		if ! _a_function_which_failure_IS_NOT_the_last_command; then
			printf '%s\n' 'failure'
		else
			printf '%s\n' 'success'
		fi
		# outputs:
		# before failure
		# after failure
		# success
	}

	# If the failure is the last command, then such works as expected, as the exit status of any function is always the exit status of the last executed command, regardless of errexit
	function before_failure_without_after {
		set -e
		_a_function_which_failure_IS_the_last_command && printf '%s\n' 'success' || printf '%s\n' 'failure'
		printf '%s\n' 'ok'
		# outputs:
		# before failure without after
		# failure
		# ok
	}

	# This behaviour also impacts how we fetch exit codes
	function status_check_without_errexit__description {
		cat <<-EOF
			# SPECIAL: Status check without errexit
			# **ERREXIT** = disabled
		EOF
	}
	function status_check_without_errexit {
		# without errexit
		set +e
		_a_function_which_failure_IS_NOT_the_last_command
		printf '%s\n' "status=$?"
		# outputs:
		# before failure
		# after failure
		# status=0
		_a_function_which_failure_IS_the_last_command
		printf '%s\n' "status=$?"
		# outputs:
		# before failure without after
		# status=1
	}
	function status_check_with_errexit {
		# with errexit
		set -e
		status=0 && _a_function_which_failure_IS_NOT_the_last_command || status=$?
		printf '%s\n' "status=$status"
		# outputs:
		# before failure
		# after failure
		# status=0
		status=0 && _a_function_which_failure_IS_the_last_command || status=$?
		printf '%s\n' "status=$status"
		# outputs:
		# before failure without after
		# status=1
	}

	source "$DOROTHY/user/sources/_doc_helper.bash"
	doc_helper --trim --colors --debug
)

# Fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	bash_error_testing "$@"
fi
